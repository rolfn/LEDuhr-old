   1               		.file	"rtc.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	dec2bcd
  12               	dec2bcd:
  13               	.LFB0:
  14               		.file 1 "ds_rtc_lib/rtc.c"
   1:ds_rtc_lib/rtc.c **** /*
   2:ds_rtc_lib/rtc.c ****       Code based on https://github.com/akafugu/ds_rtc_lib
   3:ds_rtc_lib/rtc.c ****       Rolf Niepraschk, Rolf.Niepraschk@gmx.de
   4:ds_rtc_lib/rtc.c **** */
   5:ds_rtc_lib/rtc.c **** 
   6:ds_rtc_lib/rtc.c **** /*
   7:ds_rtc_lib/rtc.c ****  * DS RTC Library: DS1307 and DS3231 driver library
   8:ds_rtc_lib/rtc.c ****  * (C) 2011 Akafugu Corporation
   9:ds_rtc_lib/rtc.c ****  *
  10:ds_rtc_lib/rtc.c ****  * This program is free software; you can redistribute it and/or modify it under the
  11:ds_rtc_lib/rtc.c ****  * terms of the GNU General Public License as published by the Free Software
  12:ds_rtc_lib/rtc.c ****  * Foundation; either version 2 of the License, or (at your option) any later
  13:ds_rtc_lib/rtc.c ****  * version.
  14:ds_rtc_lib/rtc.c ****  *
  15:ds_rtc_lib/rtc.c ****  * This program is distributed in the hope that it will be useful, but WITHOUT ANY
  16:ds_rtc_lib/rtc.c ****  * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
  17:ds_rtc_lib/rtc.c ****  * PARTICULAR PURPOSE.  See the GNU General Public License for more details.
  18:ds_rtc_lib/rtc.c ****  *
  19:ds_rtc_lib/rtc.c ****  */
  20:ds_rtc_lib/rtc.c **** 
  21:ds_rtc_lib/rtc.c **** /*
  22:ds_rtc_lib/rtc.c ****  * DS1307 register map
  23:ds_rtc_lib/rtc.c ****  *
  24:ds_rtc_lib/rtc.c ****  *  00h-06h: seconds, minutes, hours, day-of-week, date, month, year (all in BCD)
  25:ds_rtc_lib/rtc.c ****  *     bit 7 of seconds enables/disables clock
  26:ds_rtc_lib/rtc.c ****  *     bit 6 of hours toggles 12/24h mode (1 for 12h, 0 for 24h)
  27:ds_rtc_lib/rtc.c ****  *       when 12h mode is selected bit 5 is high for PM, low for AM
  28:ds_rtc_lib/rtc.c ****  *  07h: control
  29:ds_rtc_lib/rtc.c ****  *      bit7: OUT
  30:ds_rtc_lib/rtc.c ****  *      bit6: 0
  31:ds_rtc_lib/rtc.c ****  *      bit5: 0
  32:ds_rtc_lib/rtc.c ****  *      bit4: SQWE
  33:ds_rtc_lib/rtc.c ****  *      bit3: 0
  34:ds_rtc_lib/rtc.c ****  *      bit2: 0
  35:ds_rtc_lib/rtc.c ****  *      bit1: RS0
  36:ds_rtc_lib/rtc.c ****  *      bit0: RS1
  37:ds_rtc_lib/rtc.c ****  *  08h-3fh: 56 bytes of SRAM
  38:ds_rtc_lib/rtc.c ****  *
  39:ds_rtc_lib/rtc.c ****  * DS3231 register map
  40:ds_rtc_lib/rtc.c ****  *
  41:ds_rtc_lib/rtc.c ****  *  00h-06h: seconds, minutes, hours, day-of-week, date, month, year (all in BCD)
  42:ds_rtc_lib/rtc.c ****  *       bit 7 should be set to zero: The DS3231 clock is always running
  43:ds_rtc_lib/rtc.c ****  *  07h: A1M1  Alarm 1 seconds
  44:ds_rtc_lib/rtc.c ****  *  08h: A1M2  Alarm 1 minutes
  45:ds_rtc_lib/rtc.c ****  *  09h: A1M3  Alarm 1 hour (bit6 is am/pm flag in 12h mode)
  46:ds_rtc_lib/rtc.c ****  *  0ah: A1M4  Alarm 1 day/date (bit6: 1 for day, 0 for date)
  47:ds_rtc_lib/rtc.c ****  *  0bh: A2M2  Alarm 2 minutes
  48:ds_rtc_lib/rtc.c ****  *  0ch: A2M3  Alarm 2 hour (bit6 is am/pm flag in 12h mode)
  49:ds_rtc_lib/rtc.c ****  *  0dh: A2M4  Alarm 2 day/data (bit6: 1 for day, 0 for date)
  50:ds_rtc_lib/rtc.c ****  *       <see data sheet page12 for Alarm register mask bit tables:
  51:ds_rtc_lib/rtc.c ****  *        for alarm when hours, minutes and seconds match set 1000 for alarm 1>
  52:ds_rtc_lib/rtc.c ****  *  0eh: control
  53:ds_rtc_lib/rtc.c ****  *      bit7: !EOSC
  54:ds_rtc_lib/rtc.c ****  *      bit6: BBSQW
  55:ds_rtc_lib/rtc.c ****  *      bit5: CONV
  56:ds_rtc_lib/rtc.c ****  *      bit4: RS2
  57:ds_rtc_lib/rtc.c ****  *      bit3: RS1
  58:ds_rtc_lib/rtc.c ****  *      bit2: INTCN
  59:ds_rtc_lib/rtc.c ****  *      bit1: A2IE
  60:ds_rtc_lib/rtc.c ****  *      bit0: A1IE
  61:ds_rtc_lib/rtc.c ****  *  0fh: control/status
  62:ds_rtc_lib/rtc.c ****  *      bit7: OSF
  63:ds_rtc_lib/rtc.c ****  *      bit6: 0
  64:ds_rtc_lib/rtc.c ****  *      bit5: 0
  65:ds_rtc_lib/rtc.c ****  *      bit4: 0
  66:ds_rtc_lib/rtc.c ****  *      bit3: EN32kHz
  67:ds_rtc_lib/rtc.c ****  *      bit2: BSY
  68:ds_rtc_lib/rtc.c ****  *      bit1: A2F alarm 2 flag
  69:ds_rtc_lib/rtc.c ****  *      bit0: A1F alarm 1 flag
  70:ds_rtc_lib/rtc.c ****  * 10h: aging offset (signed)
  71:ds_rtc_lib/rtc.c ****  * 11h: MSB of temp (signed)
  72:ds_rtc_lib/rtc.c ****  * 12h: LSB of temp in bits 7 and 6 (0.25 degrees for each 00, 01, 10, 11)
  73:ds_rtc_lib/rtc.c ****  *
  74:ds_rtc_lib/rtc.c ****  */
  75:ds_rtc_lib/rtc.c **** 
  76:ds_rtc_lib/rtc.c **** #include <avr/io.h>
  77:ds_rtc_lib/rtc.c **** 
  78:ds_rtc_lib/rtc.c **** #define TRUE 1
  79:ds_rtc_lib/rtc.c **** #define FALSE 0
  80:ds_rtc_lib/rtc.c **** 
  81:ds_rtc_lib/rtc.c **** #include "rtc.h"
  82:ds_rtc_lib/rtc.c **** 
  83:ds_rtc_lib/rtc.c **** #define RTC_ADDR 0x68 // I2C address
  84:ds_rtc_lib/rtc.c **** #define CH_BIT 7 // clock halt bit
  85:ds_rtc_lib/rtc.c **** 
  86:ds_rtc_lib/rtc.c **** // statically allocated structure for time value
  87:ds_rtc_lib/rtc.c **** struct tm _tm;
  88:ds_rtc_lib/rtc.c **** 
  89:ds_rtc_lib/rtc.c **** uint8_t dec2bcd(uint8_t d)
  90:ds_rtc_lib/rtc.c **** {
  15               		.loc 1 90 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  91:ds_rtc_lib/rtc.c ****   return ((d/10 * 16) + (d % 10));
  22               		.loc 1 91 0
  23 0000 6AE0      		ldi r22,lo8(10)
  24 0002 00D0      		rcall __udivmodqi4
  25               	.LVL1:
  92:ds_rtc_lib/rtc.c **** }
  26               		.loc 1 92 0
  27 0004 20E1      		ldi r18,lo8(16)
  28 0006 829F      		mul r24,r18
  29 0008 900D      		add r25,r0
  30 000a 1124      		clr __zero_reg__
  31 000c 892F      		mov r24,r25
  32 000e 0895      		ret
  33               		.cfi_endproc
  34               	.LFE0:
  36               	.global	bcd2dec
  38               	bcd2dec:
  39               	.LFB1:
  93:ds_rtc_lib/rtc.c **** 
  94:ds_rtc_lib/rtc.c **** uint8_t bcd2dec(uint8_t b)
  95:ds_rtc_lib/rtc.c **** {
  40               		.loc 1 95 0
  41               		.cfi_startproc
  42               	.LVL2:
  43               	/* prologue: function */
  44               	/* frame size = 0 */
  45               	/* stack size = 0 */
  46               	.L__stack_usage = 0
  96:ds_rtc_lib/rtc.c ****   return ((b/16 * 10) + (b % 16));
  47               		.loc 1 96 0
  48 0010 982F      		mov r25,r24
  49 0012 9295      		swap r25
  50 0014 9F70      		andi r25,lo8(15)
  51 0016 8F70      		andi r24,lo8(15)
  52               	.LVL3:
  97:ds_rtc_lib/rtc.c **** }
  53               		.loc 1 97 0
  54 0018 2AE0      		ldi r18,lo8(10)
  55 001a 929F      		mul r25,r18
  56 001c 800D      		add r24,r0
  57 001e 1124      		clr __zero_reg__
  58 0020 0895      		ret
  59               		.cfi_endproc
  60               	.LFE1:
  62               	.global	rtc_read_byte
  64               	rtc_read_byte:
  65               	.LFB2:
  98:ds_rtc_lib/rtc.c **** 
  99:ds_rtc_lib/rtc.c **** uint8_t rtc_read_byte(uint8_t offset)
 100:ds_rtc_lib/rtc.c **** {
  66               		.loc 1 100 0
  67               		.cfi_startproc
  68               	.LVL4:
  69 0022 CF93      		push r28
  70               	.LCFI0:
  71               		.cfi_def_cfa_offset 3
  72               		.cfi_offset 28, -2
  73               	/* prologue: function */
  74               	/* frame size = 0 */
  75               	/* stack size = 1 */
  76               	.L__stack_usage = 1
  77 0024 C82F      		mov r28,r24
 101:ds_rtc_lib/rtc.c **** 	twi_begin_transmission(RTC_ADDR);
  78               		.loc 1 101 0
  79 0026 88E6      		ldi r24,lo8(104)
  80 0028 90E0      		ldi r25,0
  81               	.LVL5:
  82 002a 00D0      		rcall twi_begin_transmission
  83               	.LVL6:
 102:ds_rtc_lib/rtc.c **** 	twi_send_byte(offset);
  84               		.loc 1 102 0
  85 002c 8C2F      		mov r24,r28
  86 002e 90E0      		ldi r25,0
  87 0030 00D0      		rcall twi_send_byte
  88               	.LVL7:
 103:ds_rtc_lib/rtc.c **** 	twi_end_transmission();
  89               		.loc 1 103 0
  90 0032 00D0      		rcall twi_end_transmission
  91               	.LVL8:
 104:ds_rtc_lib/rtc.c **** 
 105:ds_rtc_lib/rtc.c **** 	twi_request_from(RTC_ADDR, 1);
  92               		.loc 1 105 0
  93 0034 61E0      		ldi r22,lo8(1)
  94 0036 70E0      		ldi r23,0
  95 0038 88E6      		ldi r24,lo8(104)
  96 003a 90E0      		ldi r25,0
  97 003c 00D0      		rcall twi_request_from
  98               	.LVL9:
 106:ds_rtc_lib/rtc.c **** 	return twi_receive();
  99               		.loc 1 106 0
 100 003e 00D0      		rcall twi_receive
 101               	.LVL10:
 102               	/* epilogue start */
 107:ds_rtc_lib/rtc.c **** }
 103               		.loc 1 107 0
 104 0040 CF91      		pop r28
 105               	.LVL11:
 106 0042 0895      		ret
 107               		.cfi_endproc
 108               	.LFE2:
 110               	.global	rtc_write_byte
 112               	rtc_write_byte:
 113               	.LFB3:
 108:ds_rtc_lib/rtc.c **** 
 109:ds_rtc_lib/rtc.c **** void rtc_write_byte(uint8_t b, uint8_t offset)
 110:ds_rtc_lib/rtc.c **** {
 114               		.loc 1 110 0
 115               		.cfi_startproc
 116               	.LVL12:
 117 0044 1F93      		push r17
 118               	.LCFI1:
 119               		.cfi_def_cfa_offset 3
 120               		.cfi_offset 17, -2
 121 0046 CF93      		push r28
 122               	.LCFI2:
 123               		.cfi_def_cfa_offset 4
 124               		.cfi_offset 28, -3
 125 0048 DF93      		push r29
 126               	.LCFI3:
 127               		.cfi_def_cfa_offset 5
 128               		.cfi_offset 29, -4
 129 004a 1F92      		push __zero_reg__
 130               	.LCFI4:
 131               		.cfi_def_cfa_offset 6
 132 004c CDB7      		in r28,__SP_L__
 133 004e DEB7      		in r29,__SP_H__
 134               	.LCFI5:
 135               		.cfi_def_cfa_register 28
 136               	/* prologue: function */
 137               	/* frame size = 1 */
 138               	/* stack size = 4 */
 139               	.L__stack_usage = 4
 140 0050 182F      		mov r17,r24
 111:ds_rtc_lib/rtc.c **** 	twi_begin_transmission(RTC_ADDR);
 141               		.loc 1 111 0
 142 0052 88E6      		ldi r24,lo8(104)
 143 0054 90E0      		ldi r25,0
 144               	.LVL13:
 145 0056 6983      		std Y+1,r22
 146 0058 00D0      		rcall twi_begin_transmission
 147               	.LVL14:
 112:ds_rtc_lib/rtc.c **** 	twi_send_byte(offset);
 148               		.loc 1 112 0
 149 005a 6981      		ldd r22,Y+1
 150 005c 862F      		mov r24,r22
 151 005e 90E0      		ldi r25,0
 152 0060 00D0      		rcall twi_send_byte
 153               	.LVL15:
 113:ds_rtc_lib/rtc.c **** 	twi_send_byte(b);
 154               		.loc 1 113 0
 155 0062 812F      		mov r24,r17
 156 0064 90E0      		ldi r25,0
 157 0066 00D0      		rcall twi_send_byte
 158               	.LVL16:
 159               	/* epilogue start */
 114:ds_rtc_lib/rtc.c **** 	twi_end_transmission();
 115:ds_rtc_lib/rtc.c **** }
 160               		.loc 1 115 0
 161 0068 0F90      		pop __tmp_reg__
 162 006a DF91      		pop r29
 163 006c CF91      		pop r28
 164 006e 1F91      		pop r17
 165               	.LVL17:
 114:ds_rtc_lib/rtc.c **** 	twi_end_transmission();
 166               		.loc 1 114 0
 167 0070 00C0      		rjmp twi_end_transmission
 168               	.LVL18:
 169               		.cfi_endproc
 170               	.LFE3:
 172               	.global	rtc_init
 174               	rtc_init:
 175               	.LFB4:
 116:ds_rtc_lib/rtc.c **** 
 117:ds_rtc_lib/rtc.c **** static bool s_is_ds1307 = false;
 118:ds_rtc_lib/rtc.c **** static bool s_is_ds3231 = false;
 119:ds_rtc_lib/rtc.c **** 
 120:ds_rtc_lib/rtc.c **** void rtc_init(void)
 121:ds_rtc_lib/rtc.c **** {
 176               		.loc 1 121 0
 177               		.cfi_startproc
 178 0072 CF93      		push r28
 179               	.LCFI6:
 180               		.cfi_def_cfa_offset 3
 181               		.cfi_offset 28, -2
 182 0074 DF93      		push r29
 183               	.LCFI7:
 184               		.cfi_def_cfa_offset 4
 185               		.cfi_offset 29, -3
 186               	/* prologue: function */
 187               	/* frame size = 0 */
 188               	/* stack size = 2 */
 189               	.L__stack_usage = 2
 122:ds_rtc_lib/rtc.c **** 	// Attempt autodetection:
 123:ds_rtc_lib/rtc.c **** 	// 1) Read and save temperature register
 124:ds_rtc_lib/rtc.c **** 	// 2) Write a value to temperature register
 125:ds_rtc_lib/rtc.c **** 	// 3) Read back the value
 126:ds_rtc_lib/rtc.c **** 	//   equal to the one written: DS1307, write back saved value and return
 127:ds_rtc_lib/rtc.c **** 	//   different from written:   DS3231
 128:ds_rtc_lib/rtc.c **** 
 129:ds_rtc_lib/rtc.c **** 	uint8_t temp1 = rtc_read_byte(0x11);
 190               		.loc 1 129 0
 191 0076 81E1      		ldi r24,lo8(17)
 192 0078 00D0      		rcall rtc_read_byte
 193               	.LVL19:
 194 007a D82F      		mov r29,r24
 195               	.LVL20:
 130:ds_rtc_lib/rtc.c **** 	uint8_t temp2 = rtc_read_byte(0x12);
 196               		.loc 1 130 0
 197 007c 82E1      		ldi r24,lo8(18)
 198               	.LVL21:
 199 007e 00D0      		rcall rtc_read_byte
 200               	.LVL22:
 201 0080 C82F      		mov r28,r24
 202               	.LVL23:
 131:ds_rtc_lib/rtc.c **** 
 132:ds_rtc_lib/rtc.c **** 	rtc_write_byte(0xee, 0x11);
 203               		.loc 1 132 0
 204 0082 61E1      		ldi r22,lo8(17)
 205 0084 8EEE      		ldi r24,lo8(-18)
 206               	.LVL24:
 207 0086 00D0      		rcall rtc_write_byte
 208               	.LVL25:
 133:ds_rtc_lib/rtc.c **** 	rtc_write_byte(0xdd, 0x12);
 209               		.loc 1 133 0
 210 0088 62E1      		ldi r22,lo8(18)
 211 008a 8DED      		ldi r24,lo8(-35)
 212 008c 00D0      		rcall rtc_write_byte
 213               	.LVL26:
 134:ds_rtc_lib/rtc.c **** 
 135:ds_rtc_lib/rtc.c **** 	if (rtc_read_byte(0x11) == 0xee && rtc_read_byte(0x12) == 0xdd) {
 214               		.loc 1 135 0
 215 008e 81E1      		ldi r24,lo8(17)
 216 0090 00D0      		rcall rtc_read_byte
 217               	.LVL27:
 218 0092 8E3E      		cpi r24,lo8(-18)
 219 0094 01F4      		brne .L6
 220               		.loc 1 135 0 is_stmt 0 discriminator 1
 221 0096 82E1      		ldi r24,lo8(18)
 222 0098 00D0      		rcall rtc_read_byte
 223               	.LVL28:
 224 009a 8D3D      		cpi r24,lo8(-35)
 225 009c 01F4      		brne .L6
 136:ds_rtc_lib/rtc.c **** 		s_is_ds1307 = true;
 226               		.loc 1 136 0 is_stmt 1
 227 009e 81E0      		ldi r24,lo8(1)
 228 00a0 8093 0000 		sts s_is_ds1307,r24
 137:ds_rtc_lib/rtc.c **** 		// restore values
 138:ds_rtc_lib/rtc.c **** 		rtc_write_byte(temp1, 0x11);
 229               		.loc 1 138 0
 230 00a4 61E1      		ldi r22,lo8(17)
 231 00a6 8D2F      		mov r24,r29
 232 00a8 00D0      		rcall rtc_write_byte
 233               	.LVL29:
 139:ds_rtc_lib/rtc.c **** 		rtc_write_byte(temp2, 0x12);
 234               		.loc 1 139 0
 235 00aa 62E1      		ldi r22,lo8(18)
 236 00ac 8C2F      		mov r24,r28
 237               	/* epilogue start */
 140:ds_rtc_lib/rtc.c **** 	}
 141:ds_rtc_lib/rtc.c **** 	else {
 142:ds_rtc_lib/rtc.c **** 		s_is_ds3231 = true;
 143:ds_rtc_lib/rtc.c **** 	}
 144:ds_rtc_lib/rtc.c **** }
 238               		.loc 1 144 0
 239 00ae DF91      		pop r29
 240               	.LVL30:
 241 00b0 CF91      		pop r28
 242               	.LVL31:
 139:ds_rtc_lib/rtc.c **** 		rtc_write_byte(temp2, 0x12);
 243               		.loc 1 139 0
 244 00b2 00C0      		rjmp rtc_write_byte
 245               	.LVL32:
 246               	.L6:
 142:ds_rtc_lib/rtc.c **** 	}
 247               		.loc 1 142 0
 248 00b4 81E0      		ldi r24,lo8(1)
 249 00b6 8093 0000 		sts s_is_ds3231,r24
 250               	/* epilogue start */
 251               		.loc 1 144 0
 252 00ba DF91      		pop r29
 253               	.LVL33:
 254 00bc CF91      		pop r28
 255               	.LVL34:
 256 00be 0895      		ret
 257               		.cfi_endproc
 258               	.LFE4:
 260               	.global	rtc_is_ds1307
 262               	rtc_is_ds1307:
 263               	.LFB5:
 145:ds_rtc_lib/rtc.c **** 
 146:ds_rtc_lib/rtc.c **** // Autodetection
 147:ds_rtc_lib/rtc.c **** bool rtc_is_ds1307(void) { return s_is_ds1307; }
 264               		.loc 1 147 0
 265               		.cfi_startproc
 266               	/* prologue: function */
 267               	/* frame size = 0 */
 268               	/* stack size = 0 */
 269               	.L__stack_usage = 0
 270               		.loc 1 147 0
 271 00c0 8091 0000 		lds r24,s_is_ds1307
 272 00c4 0895      		ret
 273               		.cfi_endproc
 274               	.LFE5:
 276               	.global	rtc_is_ds3231
 278               	rtc_is_ds3231:
 279               	.LFB6:
 148:ds_rtc_lib/rtc.c **** bool rtc_is_ds3231(void) { return s_is_ds3231; }
 280               		.loc 1 148 0
 281               		.cfi_startproc
 282               	/* prologue: function */
 283               	/* frame size = 0 */
 284               	/* stack size = 0 */
 285               	.L__stack_usage = 0
 286               		.loc 1 148 0
 287 00c6 8091 0000 		lds r24,s_is_ds3231
 288 00ca 0895      		ret
 289               		.cfi_endproc
 290               	.LFE6:
 292               	.global	rtc_set_ds1307
 294               	rtc_set_ds1307:
 295               	.LFB7:
 149:ds_rtc_lib/rtc.c **** 
 150:ds_rtc_lib/rtc.c **** // Autodetection override
 151:ds_rtc_lib/rtc.c **** void rtc_set_ds1307(void) { s_is_ds1307 = true;   s_is_ds3231 = false; }
 296               		.loc 1 151 0
 297               		.cfi_startproc
 298               	/* prologue: function */
 299               	/* frame size = 0 */
 300               	/* stack size = 0 */
 301               	.L__stack_usage = 0
 302               		.loc 1 151 0
 303 00cc 81E0      		ldi r24,lo8(1)
 304 00ce 8093 0000 		sts s_is_ds1307,r24
 305 00d2 1092 0000 		sts s_is_ds3231,__zero_reg__
 306 00d6 0895      		ret
 307               		.cfi_endproc
 308               	.LFE7:
 310               	.global	rtc_set_ds3231
 312               	rtc_set_ds3231:
 313               	.LFB8:
 152:ds_rtc_lib/rtc.c **** void rtc_set_ds3231(void) { s_is_ds1307 = false;  s_is_ds3231 = true;  }
 314               		.loc 1 152 0
 315               		.cfi_startproc
 316               	/* prologue: function */
 317               	/* frame size = 0 */
 318               	/* stack size = 0 */
 319               	.L__stack_usage = 0
 320               		.loc 1 152 0
 321 00d8 1092 0000 		sts s_is_ds1307,__zero_reg__
 322 00dc 81E0      		ldi r24,lo8(1)
 323 00de 8093 0000 		sts s_is_ds3231,r24
 324 00e2 0895      		ret
 325               		.cfi_endproc
 326               	.LFE8:
 328               	.global	rtc_get_time
 330               	rtc_get_time:
 331               	.LFB9:
 153:ds_rtc_lib/rtc.c **** 
 154:ds_rtc_lib/rtc.c **** struct tm* rtc_get_time(void)
 155:ds_rtc_lib/rtc.c **** {
 332               		.loc 1 155 0
 333               		.cfi_startproc
 334 00e4 EF92      		push r14
 335               	.LCFI8:
 336               		.cfi_def_cfa_offset 3
 337               		.cfi_offset 14, -2
 338 00e6 FF92      		push r15
 339               	.LCFI9:
 340               		.cfi_def_cfa_offset 4
 341               		.cfi_offset 15, -3
 342 00e8 0F93      		push r16
 343               	.LCFI10:
 344               		.cfi_def_cfa_offset 5
 345               		.cfi_offset 16, -4
 346 00ea 1F93      		push r17
 347               	.LCFI11:
 348               		.cfi_def_cfa_offset 6
 349               		.cfi_offset 17, -5
 350 00ec CF93      		push r28
 351               	.LCFI12:
 352               		.cfi_def_cfa_offset 7
 353               		.cfi_offset 28, -6
 354 00ee DF93      		push r29
 355               	.LCFI13:
 356               		.cfi_def_cfa_offset 8
 357               		.cfi_offset 29, -7
 358 00f0 CDB7      		in r28,__SP_L__
 359 00f2 DEB7      		in r29,__SP_H__
 360               	.LCFI14:
 361               		.cfi_def_cfa_register 28
 362 00f4 2997      		sbiw r28,9
 363               	.LCFI15:
 364               		.cfi_def_cfa_offset 17
 365 00f6 0FB6      		in __tmp_reg__,__SREG__
 366 00f8 F894      		cli
 367 00fa DEBF      		out __SP_H__,r29
 368 00fc 0FBE      		out __SREG__,__tmp_reg__
 369 00fe CDBF      		out __SP_L__,r28
 370               	/* prologue: function */
 371               	/* frame size = 9 */
 372               	/* stack size = 15 */
 373               	.L__stack_usage = 15
 156:ds_rtc_lib/rtc.c **** 	uint8_t rtc[9];
 157:ds_rtc_lib/rtc.c **** 
 158:ds_rtc_lib/rtc.c **** 	// read 7 bytes starting from register 0
 159:ds_rtc_lib/rtc.c **** 	// sec, min, hour, day-of-week, date, month, year
 160:ds_rtc_lib/rtc.c **** 	twi_begin_transmission(RTC_ADDR);
 374               		.loc 1 160 0
 375 0100 88E6      		ldi r24,lo8(104)
 376 0102 90E0      		ldi r25,0
 377 0104 00D0      		rcall twi_begin_transmission
 378               	.LVL35:
 161:ds_rtc_lib/rtc.c **** 	twi_send_byte(0x0);
 379               		.loc 1 161 0
 380 0106 80E0      		ldi r24,0
 381 0108 90E0      		ldi r25,0
 382 010a 00D0      		rcall twi_send_byte
 383               	.LVL36:
 162:ds_rtc_lib/rtc.c **** 	twi_end_transmission();
 384               		.loc 1 162 0
 385 010c 00D0      		rcall twi_end_transmission
 386               	.LVL37:
 163:ds_rtc_lib/rtc.c **** 
 164:ds_rtc_lib/rtc.c **** 	twi_request_from(RTC_ADDR, 7);
 387               		.loc 1 164 0
 388 010e 67E0      		ldi r22,lo8(7)
 389 0110 70E0      		ldi r23,0
 390 0112 88E6      		ldi r24,lo8(104)
 391 0114 90E0      		ldi r25,0
 392 0116 00D0      		rcall twi_request_from
 393               	.LVL38:
 394 0118 8E01      		movw r16,r28
 395 011a 0F5F      		subi r16,-1
 396 011c 1F4F      		sbci r17,-1
 397 011e 7E01      		movw r14,r28
 398 0120 88E0      		ldi r24,8
 399 0122 E80E      		add r14,r24
 400 0124 F11C      		adc r15,__zero_reg__
 401               	.LVL39:
 402               	.L14:
 403               	.LBB2:
 404               	.LBB3:
 165:ds_rtc_lib/rtc.c **** 
 166:ds_rtc_lib/rtc.c **** 	for(uint8_t i=0; i<7; i++) {
 167:ds_rtc_lib/rtc.c **** 		rtc[i] = twi_receive();
 405               		.loc 1 167 0 discriminator 2
 406 0126 00D0      		rcall twi_receive
 407               	.LVL40:
 408 0128 F801      		movw r30,r16
 409 012a 8193      		st Z+,r24
 410 012c 8F01      		movw r16,r30
 411               	.LBE3:
 166:ds_rtc_lib/rtc.c **** 		rtc[i] = twi_receive();
 412               		.loc 1 166 0 discriminator 2
 413 012e EE15      		cp r30,r14
 414 0130 FF05      		cpc r31,r15
 415 0132 01F4      		brne .L14
 416               	.LBE2:
 168:ds_rtc_lib/rtc.c **** 	}
 169:ds_rtc_lib/rtc.c **** 
 170:ds_rtc_lib/rtc.c **** 	twi_end_transmission();
 417               		.loc 1 170 0
 418 0134 00D0      		rcall twi_end_transmission
 419               	.LVL41:
 171:ds_rtc_lib/rtc.c **** 
 172:ds_rtc_lib/rtc.c **** 	// Clear clock halt bit from read data
 173:ds_rtc_lib/rtc.c **** 	// This starts the clock for a DS1307, and has no effect for a DS3231
 174:ds_rtc_lib/rtc.c **** 	rtc[0] &= ~(_BV(CH_BIT)); // clear bit
 420               		.loc 1 174 0
 421 0136 8981      		ldd r24,Y+1
 175:ds_rtc_lib/rtc.c **** 
 176:ds_rtc_lib/rtc.c **** 	_tm.sec  = bcd2dec(rtc[0]);
 422               		.loc 1 176 0
 423 0138 8F77      		andi r24,lo8(127)
 424 013a 00D0      		rcall bcd2dec
 425               	.LVL42:
 426 013c 90E0      		ldi r25,0
 427 013e 9093 0000 		sts _tm+1,r25
 428 0142 8093 0000 		sts _tm,r24
 177:ds_rtc_lib/rtc.c **** 	_tm.min  = bcd2dec(rtc[1]);
 429               		.loc 1 177 0
 430 0146 8A81      		ldd r24,Y+2
 431 0148 00D0      		rcall bcd2dec
 432               	.LVL43:
 433 014a 90E0      		ldi r25,0
 434 014c 9093 0000 		sts _tm+2+1,r25
 435 0150 8093 0000 		sts _tm+2,r24
 178:ds_rtc_lib/rtc.c **** 	_tm.hour = bcd2dec(rtc[2]);
 436               		.loc 1 178 0
 437 0154 8B81      		ldd r24,Y+3
 438 0156 00D0      		rcall bcd2dec
 439               	.LVL44:
 440 0158 082F      		mov r16,r24
 441 015a 10E0      		ldi r17,0
 442 015c 1093 0000 		sts _tm+4+1,r17
 443 0160 0093 0000 		sts _tm+4,r16
 179:ds_rtc_lib/rtc.c **** 	_tm.mday = bcd2dec(rtc[4]);
 444               		.loc 1 179 0
 445 0164 8D81      		ldd r24,Y+5
 446 0166 00D0      		rcall bcd2dec
 447               	.LVL45:
 448 0168 90E0      		ldi r25,0
 449 016a 9093 0000 		sts _tm+6+1,r25
 450 016e 8093 0000 		sts _tm+6,r24
 180:ds_rtc_lib/rtc.c **** 	_tm.mon  = bcd2dec(rtc[5]); // returns 1-12
 451               		.loc 1 180 0
 452 0172 8E81      		ldd r24,Y+6
 453 0174 00D0      		rcall bcd2dec
 454               	.LVL46:
 455 0176 90E0      		ldi r25,0
 456 0178 9093 0000 		sts _tm+8+1,r25
 457 017c 8093 0000 		sts _tm+8,r24
 181:ds_rtc_lib/rtc.c **** 	_tm.year = bcd2dec(rtc[6]); // year 0-99
 458               		.loc 1 181 0
 459 0180 8F81      		ldd r24,Y+7
 460 0182 00D0      		rcall bcd2dec
 461               	.LVL47:
 462 0184 90E0      		ldi r25,0
 463 0186 9093 0000 		sts _tm+10+1,r25
 464 018a 8093 0000 		sts _tm+10,r24
 182:ds_rtc_lib/rtc.c **** 	_tm.wday = bcd2dec(rtc[3]); // returns 1-7
 465               		.loc 1 182 0
 466 018e 8C81      		ldd r24,Y+4
 467 0190 00D0      		rcall bcd2dec
 468               	.LVL48:
 469 0192 90E0      		ldi r25,0
 470 0194 9093 0000 		sts _tm+12+1,r25
 471 0198 8093 0000 		sts _tm+12,r24
 183:ds_rtc_lib/rtc.c **** 
 184:ds_rtc_lib/rtc.c **** 	if (_tm.hour == 0) {
 472               		.loc 1 184 0
 473 019c 0115      		cp r16,__zero_reg__
 474 019e 1105      		cpc r17,__zero_reg__
 475 01a0 01F4      		brne .L15
 185:ds_rtc_lib/rtc.c **** 		_tm.twelveHour = 0;
 476               		.loc 1 185 0
 477 01a2 1092 0000 		sts _tm+15+1,__zero_reg__
 478 01a6 1092 0000 		sts _tm+15,__zero_reg__
 479 01aa 00C0      		rjmp .L18
 480               	.L15:
 186:ds_rtc_lib/rtc.c **** 		_tm.am = 1;
 187:ds_rtc_lib/rtc.c **** 	}
 188:ds_rtc_lib/rtc.c **** 	else if (_tm.hour < 12) {
 481               		.loc 1 188 0
 482 01ac 0C30      		cpi r16,12
 483 01ae 1105      		cpc r17,__zero_reg__
 484 01b0 04F4      		brge .L17
 189:ds_rtc_lib/rtc.c **** 		_tm.twelveHour = _tm.hour;
 485               		.loc 1 189 0
 486 01b2 1093 0000 		sts _tm+15+1,r17
 487 01b6 0093 0000 		sts _tm+15,r16
 488               	.L18:
 190:ds_rtc_lib/rtc.c **** 		_tm.am = 1;
 489               		.loc 1 190 0
 490 01ba 81E0      		ldi r24,lo8(1)
 491 01bc 8093 0000 		sts _tm+14,r24
 492 01c0 00C0      		rjmp .L16
 493               	.L17:
 191:ds_rtc_lib/rtc.c **** 	}
 192:ds_rtc_lib/rtc.c **** 	else {
 193:ds_rtc_lib/rtc.c **** 		_tm.twelveHour = _tm.hour - 12;
 494               		.loc 1 193 0
 495 01c2 0C50      		subi r16,12
 496 01c4 1109      		sbc r17,__zero_reg__
 497 01c6 1093 0000 		sts _tm+15+1,r17
 498 01ca 0093 0000 		sts _tm+15,r16
 194:ds_rtc_lib/rtc.c **** 		_tm.am = 0;
 499               		.loc 1 194 0
 500 01ce 1092 0000 		sts _tm+14,__zero_reg__
 501               	.L16:
 195:ds_rtc_lib/rtc.c **** 	}
 196:ds_rtc_lib/rtc.c **** 
 197:ds_rtc_lib/rtc.c **** 	return &_tm;
 198:ds_rtc_lib/rtc.c **** }
 502               		.loc 1 198 0
 503 01d2 80E0      		ldi r24,lo8(_tm)
 504 01d4 90E0      		ldi r25,hi8(_tm)
 505               	/* epilogue start */
 506 01d6 2996      		adiw r28,9
 507 01d8 0FB6      		in __tmp_reg__,__SREG__
 508 01da F894      		cli
 509 01dc DEBF      		out __SP_H__,r29
 510 01de 0FBE      		out __SREG__,__tmp_reg__
 511 01e0 CDBF      		out __SP_L__,r28
 512 01e2 DF91      		pop r29
 513 01e4 CF91      		pop r28
 514 01e6 1F91      		pop r17
 515 01e8 0F91      		pop r16
 516 01ea FF90      		pop r15
 517 01ec EF90      		pop r14
 518 01ee 0895      		ret
 519               		.cfi_endproc
 520               	.LFE9:
 522               	.global	rtc_get_time_s
 524               	rtc_get_time_s:
 525               	.LFB10:
 199:ds_rtc_lib/rtc.c **** 
 200:ds_rtc_lib/rtc.c **** void rtc_get_time_s(uint8_t* hour, uint8_t* min, uint8_t* sec)
 201:ds_rtc_lib/rtc.c **** {
 526               		.loc 1 201 0
 527               		.cfi_startproc
 528               	.LVL49:
 529 01f0 8F92      		push r8
 530               	.LCFI16:
 531               		.cfi_def_cfa_offset 3
 532               		.cfi_offset 8, -2
 533 01f2 9F92      		push r9
 534               	.LCFI17:
 535               		.cfi_def_cfa_offset 4
 536               		.cfi_offset 9, -3
 537 01f4 AF92      		push r10
 538               	.LCFI18:
 539               		.cfi_def_cfa_offset 5
 540               		.cfi_offset 10, -4
 541 01f6 BF92      		push r11
 542               	.LCFI19:
 543               		.cfi_def_cfa_offset 6
 544               		.cfi_offset 11, -5
 545 01f8 CF92      		push r12
 546               	.LCFI20:
 547               		.cfi_def_cfa_offset 7
 548               		.cfi_offset 12, -6
 549 01fa DF92      		push r13
 550               	.LCFI21:
 551               		.cfi_def_cfa_offset 8
 552               		.cfi_offset 13, -7
 553 01fc EF92      		push r14
 554               	.LCFI22:
 555               		.cfi_def_cfa_offset 9
 556               		.cfi_offset 14, -8
 557 01fe FF92      		push r15
 558               	.LCFI23:
 559               		.cfi_def_cfa_offset 10
 560               		.cfi_offset 15, -9
 561 0200 0F93      		push r16
 562               	.LCFI24:
 563               		.cfi_def_cfa_offset 11
 564               		.cfi_offset 16, -10
 565 0202 1F93      		push r17
 566               	.LCFI25:
 567               		.cfi_def_cfa_offset 12
 568               		.cfi_offset 17, -11
 569 0204 CF93      		push r28
 570               	.LCFI26:
 571               		.cfi_def_cfa_offset 13
 572               		.cfi_offset 28, -12
 573 0206 DF93      		push r29
 574               	.LCFI27:
 575               		.cfi_def_cfa_offset 14
 576               		.cfi_offset 29, -13
 577 0208 CDB7      		in r28,__SP_L__
 578 020a DEB7      		in r29,__SP_H__
 579               	.LCFI28:
 580               		.cfi_def_cfa_register 28
 581 020c 2997      		sbiw r28,9
 582               	.LCFI29:
 583               		.cfi_def_cfa_offset 23
 584 020e 0FB6      		in __tmp_reg__,__SREG__
 585 0210 F894      		cli
 586 0212 DEBF      		out __SP_H__,r29
 587 0214 0FBE      		out __SREG__,__tmp_reg__
 588 0216 CDBF      		out __SP_L__,r28
 589               	/* prologue: function */
 590               	/* frame size = 9 */
 591               	/* stack size = 21 */
 592               	.L__stack_usage = 21
 593 0218 7C01      		movw r14,r24
 594 021a 6B01      		movw r12,r22
 595 021c 5A01      		movw r10,r20
 202:ds_rtc_lib/rtc.c **** 	uint8_t rtc[9];
 203:ds_rtc_lib/rtc.c **** 
 204:ds_rtc_lib/rtc.c **** 	// read 7 bytes starting from register 0
 205:ds_rtc_lib/rtc.c **** 	// sec, min, hour, day-of-week, date, month, year
 206:ds_rtc_lib/rtc.c **** 	twi_begin_transmission(RTC_ADDR);
 596               		.loc 1 206 0
 597 021e 88E6      		ldi r24,lo8(104)
 598 0220 90E0      		ldi r25,0
 599               	.LVL50:
 600 0222 00D0      		rcall twi_begin_transmission
 601               	.LVL51:
 207:ds_rtc_lib/rtc.c **** 	twi_send_byte(0x0);
 602               		.loc 1 207 0
 603 0224 80E0      		ldi r24,0
 604 0226 90E0      		ldi r25,0
 605 0228 00D0      		rcall twi_send_byte
 606               	.LVL52:
 208:ds_rtc_lib/rtc.c **** 	twi_end_transmission();
 607               		.loc 1 208 0
 608 022a 00D0      		rcall twi_end_transmission
 609               	.LVL53:
 209:ds_rtc_lib/rtc.c **** 
 210:ds_rtc_lib/rtc.c **** 	twi_request_from(RTC_ADDR, 7);
 610               		.loc 1 210 0
 611 022c 67E0      		ldi r22,lo8(7)
 612 022e 70E0      		ldi r23,0
 613 0230 88E6      		ldi r24,lo8(104)
 614 0232 90E0      		ldi r25,0
 615 0234 00D0      		rcall twi_request_from
 616               	.LVL54:
 617 0236 8E01      		movw r16,r28
 618 0238 0F5F      		subi r16,-1
 619 023a 1F4F      		sbci r17,-1
 620 023c 4E01      		movw r8,r28
 621 023e 88E0      		ldi r24,8
 622 0240 880E      		add r8,r24
 623 0242 911C      		adc r9,__zero_reg__
 624               	.LVL55:
 625               	.L21:
 626               	.LBB4:
 627               	.LBB5:
 211:ds_rtc_lib/rtc.c **** 
 212:ds_rtc_lib/rtc.c **** 	for(uint8_t i=0; i<7; i++) {
 213:ds_rtc_lib/rtc.c **** 		rtc[i] = twi_receive();
 628               		.loc 1 213 0 discriminator 2
 629 0244 00D0      		rcall twi_receive
 630               	.LVL56:
 631 0246 F801      		movw r30,r16
 632 0248 8193      		st Z+,r24
 633 024a 8F01      		movw r16,r30
 634               	.LBE5:
 212:ds_rtc_lib/rtc.c **** 		rtc[i] = twi_receive();
 635               		.loc 1 212 0 discriminator 2
 636 024c E815      		cp r30,r8
 637 024e F905      		cpc r31,r9
 638 0250 01F4      		brne .L21
 639               	.LBE4:
 214:ds_rtc_lib/rtc.c **** 	}
 215:ds_rtc_lib/rtc.c **** 
 216:ds_rtc_lib/rtc.c **** 	twi_end_transmission();
 640               		.loc 1 216 0
 641 0252 00D0      		rcall twi_end_transmission
 642               	.LVL57:
 217:ds_rtc_lib/rtc.c **** 
 218:ds_rtc_lib/rtc.c **** 	if (sec)  *sec =  bcd2dec(rtc[0]);
 643               		.loc 1 218 0
 644 0254 A114      		cp r10,__zero_reg__
 645 0256 B104      		cpc r11,__zero_reg__
 646 0258 01F0      		breq .L22
 647               		.loc 1 218 0 is_stmt 0 discriminator 1
 648 025a 8981      		ldd r24,Y+1
 649 025c 00D0      		rcall bcd2dec
 650               	.LVL58:
 651 025e F501      		movw r30,r10
 652 0260 8083      		st Z,r24
 653               	.L22:
 219:ds_rtc_lib/rtc.c **** 	if (min)  *min =  bcd2dec(rtc[1]);
 654               		.loc 1 219 0 is_stmt 1
 655 0262 C114      		cp r12,__zero_reg__
 656 0264 D104      		cpc r13,__zero_reg__
 657 0266 01F0      		breq .L23
 658               		.loc 1 219 0 is_stmt 0 discriminator 1
 659 0268 8A81      		ldd r24,Y+2
 660 026a 00D0      		rcall bcd2dec
 661               	.LVL59:
 662 026c F601      		movw r30,r12
 663 026e 8083      		st Z,r24
 664               	.L23:
 220:ds_rtc_lib/rtc.c **** 	if (hour) *hour = bcd2dec(rtc[2]);
 665               		.loc 1 220 0 is_stmt 1
 666 0270 E114      		cp r14,__zero_reg__
 667 0272 F104      		cpc r15,__zero_reg__
 668 0274 01F0      		breq .L19
 669               		.loc 1 220 0 is_stmt 0 discriminator 1
 670 0276 8B81      		ldd r24,Y+3
 671 0278 00D0      		rcall bcd2dec
 672               	.LVL60:
 673 027a F701      		movw r30,r14
 674 027c 8083      		st Z,r24
 675               	.L19:
 676               	/* epilogue start */
 221:ds_rtc_lib/rtc.c **** }
 677               		.loc 1 221 0 is_stmt 1
 678 027e 2996      		adiw r28,9
 679 0280 0FB6      		in __tmp_reg__,__SREG__
 680 0282 F894      		cli
 681 0284 DEBF      		out __SP_H__,r29
 682 0286 0FBE      		out __SREG__,__tmp_reg__
 683 0288 CDBF      		out __SP_L__,r28
 684 028a DF91      		pop r29
 685 028c CF91      		pop r28
 686 028e 1F91      		pop r17
 687 0290 0F91      		pop r16
 688 0292 FF90      		pop r15
 689 0294 EF90      		pop r14
 690               	.LVL61:
 691 0296 DF90      		pop r13
 692 0298 CF90      		pop r12
 693               	.LVL62:
 694 029a BF90      		pop r11
 695 029c AF90      		pop r10
 696               	.LVL63:
 697 029e 9F90      		pop r9
 698 02a0 8F90      		pop r8
 699 02a2 0895      		ret
 700               		.cfi_endproc
 701               	.LFE10:
 703               	.global	rtc_set_time
 705               	rtc_set_time:
 706               	.LFB11:
 222:ds_rtc_lib/rtc.c **** 
 223:ds_rtc_lib/rtc.c **** // fixme: support 12-hour mode for setting time
 224:ds_rtc_lib/rtc.c **** void rtc_set_time(struct tm* tm_)
 225:ds_rtc_lib/rtc.c **** {
 707               		.loc 1 225 0
 708               		.cfi_startproc
 709               	.LVL64:
 710 02a4 CF93      		push r28
 711               	.LCFI30:
 712               		.cfi_def_cfa_offset 3
 713               		.cfi_offset 28, -2
 714 02a6 DF93      		push r29
 715               	.LCFI31:
 716               		.cfi_def_cfa_offset 4
 717               		.cfi_offset 29, -3
 718               	/* prologue: function */
 719               	/* frame size = 0 */
 720               	/* stack size = 2 */
 721               	.L__stack_usage = 2
 722 02a8 EC01      		movw r28,r24
 226:ds_rtc_lib/rtc.c **** 	twi_begin_transmission(RTC_ADDR);
 723               		.loc 1 226 0
 724 02aa 88E6      		ldi r24,lo8(104)
 725 02ac 90E0      		ldi r25,0
 726               	.LVL65:
 727 02ae 00D0      		rcall twi_begin_transmission
 728               	.LVL66:
 227:ds_rtc_lib/rtc.c **** 	twi_send_byte(0x0);
 729               		.loc 1 227 0
 730 02b0 80E0      		ldi r24,0
 731 02b2 90E0      		ldi r25,0
 732 02b4 00D0      		rcall twi_send_byte
 733               	.LVL67:
 228:ds_rtc_lib/rtc.c **** 
 229:ds_rtc_lib/rtc.c **** 	// clock halt bit is 7th bit of seconds: this is always cleared to start the clock
 230:ds_rtc_lib/rtc.c **** 	twi_send_byte(dec2bcd(tm_->sec)); // seconds
 734               		.loc 1 230 0
 735 02b6 8881      		ld r24,Y
 736 02b8 00D0      		rcall dec2bcd
 737               	.LVL68:
 738 02ba 90E0      		ldi r25,0
 739 02bc 00D0      		rcall twi_send_byte
 740               	.LVL69:
 231:ds_rtc_lib/rtc.c **** 	twi_send_byte(dec2bcd(tm_->min)); // minutes
 741               		.loc 1 231 0
 742 02be 8A81      		ldd r24,Y+2
 743 02c0 00D0      		rcall dec2bcd
 744               	.LVL70:
 745 02c2 90E0      		ldi r25,0
 746 02c4 00D0      		rcall twi_send_byte
 747               	.LVL71:
 232:ds_rtc_lib/rtc.c **** 	twi_send_byte(dec2bcd(tm_->hour)); // hours
 748               		.loc 1 232 0
 749 02c6 8C81      		ldd r24,Y+4
 750 02c8 00D0      		rcall dec2bcd
 751               	.LVL72:
 752 02ca 90E0      		ldi r25,0
 753 02cc 00D0      		rcall twi_send_byte
 754               	.LVL73:
 233:ds_rtc_lib/rtc.c **** 	twi_send_byte(dec2bcd(tm_->wday)); // day of week
 755               		.loc 1 233 0
 756 02ce 8C85      		ldd r24,Y+12
 757 02d0 00D0      		rcall dec2bcd
 758               	.LVL74:
 759 02d2 90E0      		ldi r25,0
 760 02d4 00D0      		rcall twi_send_byte
 761               	.LVL75:
 234:ds_rtc_lib/rtc.c **** 	twi_send_byte(dec2bcd(tm_->mday)); // day
 762               		.loc 1 234 0
 763 02d6 8E81      		ldd r24,Y+6
 764 02d8 00D0      		rcall dec2bcd
 765               	.LVL76:
 766 02da 90E0      		ldi r25,0
 767 02dc 00D0      		rcall twi_send_byte
 768               	.LVL77:
 235:ds_rtc_lib/rtc.c **** 	twi_send_byte(dec2bcd(tm_->mon)); // month
 769               		.loc 1 235 0
 770 02de 8885      		ldd r24,Y+8
 771 02e0 00D0      		rcall dec2bcd
 772               	.LVL78:
 773 02e2 90E0      		ldi r25,0
 774 02e4 00D0      		rcall twi_send_byte
 775               	.LVL79:
 236:ds_rtc_lib/rtc.c **** 	twi_send_byte(dec2bcd(tm_->year)); // year
 776               		.loc 1 236 0
 777 02e6 8A85      		ldd r24,Y+10
 778 02e8 00D0      		rcall dec2bcd
 779               	.LVL80:
 780 02ea 90E0      		ldi r25,0
 781 02ec 00D0      		rcall twi_send_byte
 782               	.LVL81:
 783               	/* epilogue start */
 237:ds_rtc_lib/rtc.c **** 
 238:ds_rtc_lib/rtc.c **** 	twi_end_transmission();
 239:ds_rtc_lib/rtc.c **** }
 784               		.loc 1 239 0
 785 02ee DF91      		pop r29
 786 02f0 CF91      		pop r28
 787               	.LVL82:
 238:ds_rtc_lib/rtc.c **** }
 788               		.loc 1 238 0
 789 02f2 00C0      		rjmp twi_end_transmission
 790               	.LVL83:
 791               		.cfi_endproc
 792               	.LFE11:
 794               	.global	rtc_set_time_s
 796               	rtc_set_time_s:
 797               	.LFB12:
 240:ds_rtc_lib/rtc.c **** 
 241:ds_rtc_lib/rtc.c **** void rtc_set_time_s(uint8_t hour, uint8_t min, uint8_t sec)
 242:ds_rtc_lib/rtc.c **** {
 798               		.loc 1 242 0
 799               		.cfi_startproc
 800               	.LVL84:
 801 02f4 1F93      		push r17
 802               	.LCFI32:
 803               		.cfi_def_cfa_offset 3
 804               		.cfi_offset 17, -2
 805 02f6 CF93      		push r28
 806               	.LCFI33:
 807               		.cfi_def_cfa_offset 4
 808               		.cfi_offset 28, -3
 809 02f8 DF93      		push r29
 810               	.LCFI34:
 811               		.cfi_def_cfa_offset 5
 812               		.cfi_offset 29, -4
 813 02fa 00D0      		rcall .
 814               	.LCFI35:
 815               		.cfi_def_cfa_offset 7
 816 02fc CDB7      		in r28,__SP_L__
 817 02fe DEB7      		in r29,__SP_H__
 818               	.LCFI36:
 819               		.cfi_def_cfa_register 28
 820               	/* prologue: function */
 821               	/* frame size = 2 */
 822               	/* stack size = 5 */
 823               	.L__stack_usage = 5
 824 0300 182F      		mov r17,r24
 243:ds_rtc_lib/rtc.c **** 	twi_begin_transmission(RTC_ADDR);
 825               		.loc 1 243 0
 826 0302 88E6      		ldi r24,lo8(104)
 827 0304 90E0      		ldi r25,0
 828               	.LVL85:
 829 0306 4983      		std Y+1,r20
 830 0308 6A83      		std Y+2,r22
 831 030a 00D0      		rcall twi_begin_transmission
 832               	.LVL86:
 244:ds_rtc_lib/rtc.c **** 	twi_send_byte(0x0);
 833               		.loc 1 244 0
 834 030c 80E0      		ldi r24,0
 835 030e 90E0      		ldi r25,0
 836 0310 00D0      		rcall twi_send_byte
 837               	.LVL87:
 245:ds_rtc_lib/rtc.c **** 
 246:ds_rtc_lib/rtc.c **** 	// clock halt bit is 7th bit of seconds: this is always cleared to start the clock
 247:ds_rtc_lib/rtc.c **** 	twi_send_byte(dec2bcd(sec)); // seconds
 838               		.loc 1 247 0
 839 0312 4981      		ldd r20,Y+1
 840 0314 842F      		mov r24,r20
 841 0316 00D0      		rcall dec2bcd
 842               	.LVL88:
 843 0318 90E0      		ldi r25,0
 844 031a 00D0      		rcall twi_send_byte
 845               	.LVL89:
 248:ds_rtc_lib/rtc.c **** 	twi_send_byte(dec2bcd(min)); // minutes
 846               		.loc 1 248 0
 847 031c 6A81      		ldd r22,Y+2
 848 031e 862F      		mov r24,r22
 849 0320 00D0      		rcall dec2bcd
 850               	.LVL90:
 851 0322 90E0      		ldi r25,0
 852 0324 00D0      		rcall twi_send_byte
 853               	.LVL91:
 249:ds_rtc_lib/rtc.c **** 	twi_send_byte(dec2bcd(hour)); // hours
 854               		.loc 1 249 0
 855 0326 812F      		mov r24,r17
 856 0328 00D0      		rcall dec2bcd
 857               	.LVL92:
 858 032a 90E0      		ldi r25,0
 859 032c 00D0      		rcall twi_send_byte
 860               	.LVL93:
 861               	/* epilogue start */
 250:ds_rtc_lib/rtc.c **** 
 251:ds_rtc_lib/rtc.c **** 	twi_end_transmission();
 252:ds_rtc_lib/rtc.c **** }
 862               		.loc 1 252 0
 863 032e 0F90      		pop __tmp_reg__
 864 0330 0F90      		pop __tmp_reg__
 865 0332 DF91      		pop r29
 866 0334 CF91      		pop r28
 867 0336 1F91      		pop r17
 868               	.LVL94:
 251:ds_rtc_lib/rtc.c **** }
 869               		.loc 1 251 0
 870 0338 00C0      		rjmp twi_end_transmission
 871               	.LVL95:
 872               		.cfi_endproc
 873               	.LFE12:
 875               	.global	rtc_run_clock
 877               	rtc_run_clock:
 878               	.LFB13:
 253:ds_rtc_lib/rtc.c **** 
 254:ds_rtc_lib/rtc.c **** // DS1307 only (has no effect when run on DS3231)
 255:ds_rtc_lib/rtc.c **** // halt/start the clock
 256:ds_rtc_lib/rtc.c **** // 7th bit of register 0 (second register)
 257:ds_rtc_lib/rtc.c **** // 0 = clock is running
 258:ds_rtc_lib/rtc.c **** // 1 = clock is not running
 259:ds_rtc_lib/rtc.c **** void rtc_run_clock(bool run)
 260:ds_rtc_lib/rtc.c **** {
 879               		.loc 1 260 0
 880               		.cfi_startproc
 881               	.LVL96:
 882 033a CF93      		push r28
 883               	.LCFI37:
 884               		.cfi_def_cfa_offset 3
 885               		.cfi_offset 28, -2
 886               	/* prologue: function */
 887               	/* frame size = 0 */
 888               	/* stack size = 1 */
 889               	.L__stack_usage = 1
 890 033c C82F      		mov r28,r24
 261:ds_rtc_lib/rtc.c ****   if (s_is_ds3231) return;
 891               		.loc 1 261 0
 892 033e 8091 0000 		lds r24,s_is_ds3231
 893               	.LVL97:
 894 0342 8111      		cpse r24,__zero_reg__
 895 0344 00C0      		rjmp .L36
 262:ds_rtc_lib/rtc.c **** 
 263:ds_rtc_lib/rtc.c ****   uint8_t b = rtc_read_byte(0x0);
 896               		.loc 1 263 0
 897 0346 00D0      		rcall rtc_read_byte
 898               	.LVL98:
 264:ds_rtc_lib/rtc.c **** 
 265:ds_rtc_lib/rtc.c ****   if (run)
 899               		.loc 1 265 0
 900 0348 CC23      		tst r28
 901 034a 01F0      		breq .L38
 266:ds_rtc_lib/rtc.c ****     b &= ~(_BV(CH_BIT)); // clear bit
 902               		.loc 1 266 0
 903 034c 8F77      		andi r24,lo8(127)
 904               	.LVL99:
 905 034e 00C0      		rjmp .L39
 906               	.L38:
 267:ds_rtc_lib/rtc.c ****   else
 268:ds_rtc_lib/rtc.c ****     b |= _BV(CH_BIT); // set bit
 907               		.loc 1 268 0
 908 0350 8068      		ori r24,lo8(-128)
 909               	.LVL100:
 910               	.L39:
 269:ds_rtc_lib/rtc.c **** 
 270:ds_rtc_lib/rtc.c ****     rtc_write_byte(b, 0x0);
 911               		.loc 1 270 0
 912 0352 60E0      		ldi r22,0
 913               	/* epilogue start */
 271:ds_rtc_lib/rtc.c **** }
 914               		.loc 1 271 0
 915 0354 CF91      		pop r28
 916               	.LVL101:
 270:ds_rtc_lib/rtc.c **** }
 917               		.loc 1 270 0
 918 0356 00C0      		rjmp rtc_write_byte
 919               	.LVL102:
 920               	.L36:
 921               	/* epilogue start */
 922               		.loc 1 271 0
 923 0358 CF91      		pop r28
 924               	.LVL103:
 925 035a 0895      		ret
 926               		.cfi_endproc
 927               	.LFE13:
 929               	.global	rtc_is_clock_running
 931               	rtc_is_clock_running:
 932               	.LFB14:
 272:ds_rtc_lib/rtc.c **** 
 273:ds_rtc_lib/rtc.c **** // DS1307 only
 274:ds_rtc_lib/rtc.c **** // Returns true if the clock is running, false otherwise
 275:ds_rtc_lib/rtc.c **** // For DS3231, it always returns true
 276:ds_rtc_lib/rtc.c **** bool rtc_is_clock_running(void)
 277:ds_rtc_lib/rtc.c **** {
 933               		.loc 1 277 0
 934               		.cfi_startproc
 935               	/* prologue: function */
 936               	/* frame size = 0 */
 937               	/* stack size = 0 */
 938               	.L__stack_usage = 0
 278:ds_rtc_lib/rtc.c ****   if (s_is_ds3231) return true;
 939               		.loc 1 278 0
 940 035c 8091 0000 		lds r24,s_is_ds3231
 941 0360 8111      		cpse r24,__zero_reg__
 942 0362 00C0      		rjmp .L42
 279:ds_rtc_lib/rtc.c **** 
 280:ds_rtc_lib/rtc.c ****   uint8_t b = rtc_read_byte(0x0);
 943               		.loc 1 280 0
 944 0364 00D0      		rcall rtc_read_byte
 945               	.LVL104:
 281:ds_rtc_lib/rtc.c **** 
 282:ds_rtc_lib/rtc.c ****   if (b & _BV(CH_BIT)) return false;
 946               		.loc 1 282 0
 947 0366 8095      		com r24
 948               	.LVL105:
 949 0368 881F      		rol r24
 950 036a 8827      		clr r24
 951 036c 881F      		rol r24
 952               	.LVL106:
 953 036e 0895      		ret
 954               	.L42:
 278:ds_rtc_lib/rtc.c **** 
 955               		.loc 1 278 0
 956 0370 81E0      		ldi r24,lo8(1)
 283:ds_rtc_lib/rtc.c ****   return true;
 284:ds_rtc_lib/rtc.c **** }
 957               		.loc 1 284 0
 958 0372 0895      		ret
 959               		.cfi_endproc
 960               	.LFE14:
 962               	.global	ds3231_get_temp_int
 964               	ds3231_get_temp_int:
 965               	.LFB15:
 285:ds_rtc_lib/rtc.c **** 
 286:ds_rtc_lib/rtc.c **** void ds3231_get_temp_int(int8_t* i, uint8_t* f)
 287:ds_rtc_lib/rtc.c **** {
 966               		.loc 1 287 0
 967               		.cfi_startproc
 968               	.LVL107:
 969 0374 FF92      		push r15
 970               	.LCFI38:
 971               		.cfi_def_cfa_offset 3
 972               		.cfi_offset 15, -2
 973 0376 0F93      		push r16
 974               	.LCFI39:
 975               		.cfi_def_cfa_offset 4
 976               		.cfi_offset 16, -3
 977 0378 1F93      		push r17
 978               	.LCFI40:
 979               		.cfi_def_cfa_offset 5
 980               		.cfi_offset 17, -4
 981 037a CF93      		push r28
 982               	.LCFI41:
 983               		.cfi_def_cfa_offset 6
 984               		.cfi_offset 28, -5
 985 037c DF93      		push r29
 986               	.LCFI42:
 987               		.cfi_def_cfa_offset 7
 988               		.cfi_offset 29, -6
 989               	/* prologue: function */
 990               	/* frame size = 0 */
 991               	/* stack size = 5 */
 992               	.L__stack_usage = 5
 993 037e 8C01      		movw r16,r24
 994 0380 EB01      		movw r28,r22
 288:ds_rtc_lib/rtc.c **** 	uint8_t msb, lsb;
 289:ds_rtc_lib/rtc.c **** 
 290:ds_rtc_lib/rtc.c **** 	*i = 0;
 995               		.loc 1 290 0
 996 0382 FC01      		movw r30,r24
 997 0384 1082      		st Z,__zero_reg__
 291:ds_rtc_lib/rtc.c **** 	*f = 0;
 998               		.loc 1 291 0
 999 0386 1882      		st Y,__zero_reg__
 292:ds_rtc_lib/rtc.c **** 
 293:ds_rtc_lib/rtc.c **** 	if (s_is_ds1307) return; // only valid on DS3231
 1000               		.loc 1 293 0
 1001 0388 8091 0000 		lds r24,s_is_ds1307
 1002               	.LVL108:
 1003 038c 8111      		cpse r24,__zero_reg__
 1004 038e 00C0      		rjmp .L43
 294:ds_rtc_lib/rtc.c **** 
 295:ds_rtc_lib/rtc.c **** 	twi_begin_transmission(RTC_ADDR);
 1005               		.loc 1 295 0
 1006 0390 88E6      		ldi r24,lo8(104)
 1007 0392 90E0      		ldi r25,0
 1008 0394 00D0      		rcall twi_begin_transmission
 1009               	.LVL109:
 296:ds_rtc_lib/rtc.c **** 	// temp registers 0x11 and 0x12
 297:ds_rtc_lib/rtc.c **** 	twi_send_byte(0x11);
 1010               		.loc 1 297 0
 1011 0396 81E1      		ldi r24,lo8(17)
 1012 0398 90E0      		ldi r25,0
 1013 039a 00D0      		rcall twi_send_byte
 1014               	.LVL110:
 298:ds_rtc_lib/rtc.c **** 	twi_end_transmission();
 1015               		.loc 1 298 0
 1016 039c 00D0      		rcall twi_end_transmission
 1017               	.LVL111:
 299:ds_rtc_lib/rtc.c **** 
 300:ds_rtc_lib/rtc.c **** 	twi_request_from(RTC_ADDR, 2);
 1018               		.loc 1 300 0
 1019 039e 62E0      		ldi r22,lo8(2)
 1020 03a0 70E0      		ldi r23,0
 1021 03a2 88E6      		ldi r24,lo8(104)
 1022 03a4 90E0      		ldi r25,0
 1023 03a6 00D0      		rcall twi_request_from
 1024               	.LVL112:
 1025               	.LBB6:
 301:ds_rtc_lib/rtc.c **** 
 302:ds_rtc_lib/rtc.c **** 	if (twi_available()) {
 1026               		.loc 1 302 0
 1027 03a8 00D0      		rcall twi_available
 1028               	.LVL113:
 1029 03aa 892B      		or r24,r25
 1030 03ac 01F0      		breq .L43
 1031               	.LBB7:
 303:ds_rtc_lib/rtc.c **** 		msb = twi_receive(); // integer part (in twos complement)
 1032               		.loc 1 303 0
 1033 03ae 00D0      		rcall twi_receive
 1034               	.LVL114:
 1035 03b0 F82E      		mov r15,r24
 1036               	.LVL115:
 304:ds_rtc_lib/rtc.c **** 		lsb = twi_receive(); // fraction part
 1037               		.loc 1 304 0
 1038 03b2 00D0      		rcall twi_receive
 1039               	.LVL116:
 305:ds_rtc_lib/rtc.c **** 
 306:ds_rtc_lib/rtc.c **** 		// integer part in entire byte
 307:ds_rtc_lib/rtc.c **** 		*i = msb;
 1040               		.loc 1 307 0
 1041 03b4 F801      		movw r30,r16
 1042 03b6 F082      		st Z,r15
 308:ds_rtc_lib/rtc.c **** 		// fractional part in top two bits (increments of 0.25)
 309:ds_rtc_lib/rtc.c **** 		*f = (lsb >> 6) * 25;
 1043               		.loc 1 309 0
 1044 03b8 8295      		swap r24
 1045               	.LVL117:
 1046 03ba 8695      		lsr r24
 1047 03bc 8695      		lsr r24
 1048 03be 8370      		andi r24,lo8(3)
 1049 03c0 99E1      		ldi r25,lo8(25)
 1050 03c2 899F      		mul r24,r25
 1051 03c4 802D      		mov r24,r0
 1052 03c6 1124      		clr r1
 1053 03c8 8883      		st Y,r24
 1054               	.LVL118:
 1055               	.L43:
 1056               	/* epilogue start */
 1057               	.LBE7:
 1058               	.LBE6:
 310:ds_rtc_lib/rtc.c **** 
 311:ds_rtc_lib/rtc.c **** 		// float value can be read like so:
 312:ds_rtc_lib/rtc.c **** 		// float temp = ((((short)msb << 8) | (short)lsb) >> 6) / 4.0f;
 313:ds_rtc_lib/rtc.c **** 	}
 314:ds_rtc_lib/rtc.c **** }
 1059               		.loc 1 314 0
 1060 03ca DF91      		pop r29
 1061 03cc CF91      		pop r28
 1062               	.LVL119:
 1063 03ce 1F91      		pop r17
 1064 03d0 0F91      		pop r16
 1065               	.LVL120:
 1066 03d2 FF90      		pop r15
 1067 03d4 0895      		ret
 1068               		.cfi_endproc
 1069               	.LFE15:
 1071               	.global	rtc_force_temp_conversion
 1073               	rtc_force_temp_conversion:
 1074               	.LFB16:
 315:ds_rtc_lib/rtc.c **** 
 316:ds_rtc_lib/rtc.c **** void rtc_force_temp_conversion(uint8_t block)
 317:ds_rtc_lib/rtc.c **** {
 1075               		.loc 1 317 0
 1076               		.cfi_startproc
 1077               	.LVL121:
 1078 03d6 CF93      		push r28
 1079               	.LCFI43:
 1080               		.cfi_def_cfa_offset 3
 1081               		.cfi_offset 28, -2
 1082 03d8 DF93      		push r29
 1083               	.LCFI44:
 1084               		.cfi_def_cfa_offset 4
 1085               		.cfi_offset 29, -3
 1086               	/* prologue: function */
 1087               	/* frame size = 0 */
 1088               	/* stack size = 2 */
 1089               	.L__stack_usage = 2
 1090 03da C82F      		mov r28,r24
 318:ds_rtc_lib/rtc.c **** 	if (s_is_ds1307) return; // only valid on DS3231
 1091               		.loc 1 318 0
 1092 03dc 8091 0000 		lds r24,s_is_ds1307
 1093               	.LVL122:
 1094 03e0 8111      		cpse r24,__zero_reg__
 1095 03e2 00C0      		rjmp .L50
 319:ds_rtc_lib/rtc.c **** 
 320:ds_rtc_lib/rtc.c **** 	// read control register (0x0E)
 321:ds_rtc_lib/rtc.c **** 	twi_begin_transmission(RTC_ADDR);
 1096               		.loc 1 321 0
 1097 03e4 88E6      		ldi r24,lo8(104)
 1098 03e6 90E0      		ldi r25,0
 1099 03e8 00D0      		rcall twi_begin_transmission
 1100               	.LVL123:
 322:ds_rtc_lib/rtc.c **** 	twi_send_byte(0x0E);
 1101               		.loc 1 322 0
 1102 03ea 8EE0      		ldi r24,lo8(14)
 1103 03ec 90E0      		ldi r25,0
 1104 03ee 00D0      		rcall twi_send_byte
 1105               	.LVL124:
 323:ds_rtc_lib/rtc.c **** 	twi_end_transmission();
 1106               		.loc 1 323 0
 1107 03f0 00D0      		rcall twi_end_transmission
 1108               	.LVL125:
 324:ds_rtc_lib/rtc.c **** 
 325:ds_rtc_lib/rtc.c **** 	twi_request_from(RTC_ADDR, 1);
 1109               		.loc 1 325 0
 1110 03f2 61E0      		ldi r22,lo8(1)
 1111 03f4 70E0      		ldi r23,0
 1112 03f6 88E6      		ldi r24,lo8(104)
 1113 03f8 90E0      		ldi r25,0
 1114 03fa 00D0      		rcall twi_request_from
 1115               	.LVL126:
 326:ds_rtc_lib/rtc.c **** 	uint8_t ctrl = twi_receive();
 1116               		.loc 1 326 0
 1117 03fc 00D0      		rcall twi_receive
 1118               	.LVL127:
 1119 03fe D82F      		mov r29,r24
 1120               	.LVL128:
 327:ds_rtc_lib/rtc.c **** 
 328:ds_rtc_lib/rtc.c **** 	ctrl |= 0b00100000; // Set CONV bit
 329:ds_rtc_lib/rtc.c **** 
 330:ds_rtc_lib/rtc.c **** 	// write new control register value
 331:ds_rtc_lib/rtc.c **** 	twi_begin_transmission(RTC_ADDR);
 1121               		.loc 1 331 0
 1122 0400 88E6      		ldi r24,lo8(104)
 1123 0402 90E0      		ldi r25,0
 1124               	.LVL129:
 1125 0404 00D0      		rcall twi_begin_transmission
 1126               	.LVL130:
 332:ds_rtc_lib/rtc.c **** 	twi_send_byte(0x0E);
 1127               		.loc 1 332 0
 1128 0406 8EE0      		ldi r24,lo8(14)
 1129 0408 90E0      		ldi r25,0
 1130 040a 00D0      		rcall twi_send_byte
 1131               	.LVL131:
 328:ds_rtc_lib/rtc.c **** 
 1132               		.loc 1 328 0
 1133 040c 8D2F      		mov r24,r29
 1134 040e 8062      		ori r24,lo8(32)
 1135               	.LVL132:
 333:ds_rtc_lib/rtc.c **** 	twi_send_byte(ctrl);
 1136               		.loc 1 333 0
 1137 0410 90E0      		ldi r25,0
 1138 0412 00D0      		rcall twi_send_byte
 1139               	.LVL133:
 334:ds_rtc_lib/rtc.c **** 	twi_end_transmission();
 1140               		.loc 1 334 0
 1141 0414 00D0      		rcall twi_end_transmission
 1142               	.LVL134:
 335:ds_rtc_lib/rtc.c **** 
 336:ds_rtc_lib/rtc.c **** 	if (!block) return;
 1143               		.loc 1 336 0
 1144 0416 CC23      		tst r28
 1145 0418 01F0      		breq .L50
 1146               	.L53:
 337:ds_rtc_lib/rtc.c **** 
 338:ds_rtc_lib/rtc.c **** 	// Temp conversion is ready when control register becomes 0
 339:ds_rtc_lib/rtc.c **** 	do {
 340:ds_rtc_lib/rtc.c **** 		// Block until CONV is 0
 341:ds_rtc_lib/rtc.c **** 		twi_begin_transmission(RTC_ADDR);
 1147               		.loc 1 341 0
 1148 041a 88E6      		ldi r24,lo8(104)
 1149 041c 90E0      		ldi r25,0
 1150 041e 00D0      		rcall twi_begin_transmission
 1151               	.LVL135:
 342:ds_rtc_lib/rtc.c **** 		twi_send_byte(0x0E);
 1152               		.loc 1 342 0
 1153 0420 8EE0      		ldi r24,lo8(14)
 1154 0422 90E0      		ldi r25,0
 1155 0424 00D0      		rcall twi_send_byte
 1156               	.LVL136:
 343:ds_rtc_lib/rtc.c **** 		twi_end_transmission();
 1157               		.loc 1 343 0
 1158 0426 00D0      		rcall twi_end_transmission
 1159               	.LVL137:
 344:ds_rtc_lib/rtc.c **** 		twi_request_from(RTC_ADDR, 1);
 1160               		.loc 1 344 0
 1161 0428 61E0      		ldi r22,lo8(1)
 1162 042a 70E0      		ldi r23,0
 1163 042c 88E6      		ldi r24,lo8(104)
 1164 042e 90E0      		ldi r25,0
 1165 0430 00D0      		rcall twi_request_from
 1166               	.LVL138:
 345:ds_rtc_lib/rtc.c **** 	} while ((twi_receive() & 0b00100000) != 0);
 1167               		.loc 1 345 0
 1168 0432 00D0      		rcall twi_receive
 1169               	.LVL139:
 1170 0434 85FD      		sbrc r24,5
 1171 0436 00C0      		rjmp .L53
 1172               	.LVL140:
 1173               	.L50:
 1174               	/* epilogue start */
 346:ds_rtc_lib/rtc.c **** }
 1175               		.loc 1 346 0
 1176 0438 DF91      		pop r29
 1177 043a CF91      		pop r28
 1178               	.LVL141:
 1179 043c 0895      		ret
 1180               		.cfi_endproc
 1181               	.LFE16:
 1183               	.global	rtc_get_sram_byte
 1185               	rtc_get_sram_byte:
 1186               	.LFB19:
 347:ds_rtc_lib/rtc.c **** 
 348:ds_rtc_lib/rtc.c **** 
 349:ds_rtc_lib/rtc.c **** #define DS1307_SRAM_ADDR 0x08
 350:ds_rtc_lib/rtc.c **** 
 351:ds_rtc_lib/rtc.c **** // SRAM: 56 bytes from address 0x08 to 0x3f (DS1307-only)
 352:ds_rtc_lib/rtc.c **** void rtc_get_sram(uint8_t* data)
 353:ds_rtc_lib/rtc.c **** {
 354:ds_rtc_lib/rtc.c **** 	// cannot receive 56 bytes in one go, because of the TWI library buffer limit
 355:ds_rtc_lib/rtc.c **** 	// so just receive one at a time for simplicity
 356:ds_rtc_lib/rtc.c ****   	for(int i=0;i<56;i++)
 357:ds_rtc_lib/rtc.c **** 		data[i] = rtc_get_sram_byte(i);
 358:ds_rtc_lib/rtc.c **** }
 359:ds_rtc_lib/rtc.c **** 
 360:ds_rtc_lib/rtc.c **** void rtc_set_sram(uint8_t *data)
 361:ds_rtc_lib/rtc.c **** {
 362:ds_rtc_lib/rtc.c **** 	// cannot send 56 bytes in one go, because of the TWI library buffer limit
 363:ds_rtc_lib/rtc.c **** 	// so just send one at a time for simplicity
 364:ds_rtc_lib/rtc.c ****   	for(int i=0;i<56;i++)
 365:ds_rtc_lib/rtc.c **** 		rtc_set_sram_byte(data[i], i);
 366:ds_rtc_lib/rtc.c **** }
 367:ds_rtc_lib/rtc.c **** 
 368:ds_rtc_lib/rtc.c **** uint8_t rtc_get_sram_byte(uint8_t offset)
 369:ds_rtc_lib/rtc.c **** {
 1187               		.loc 1 369 0
 1188               		.cfi_startproc
 1189               	.LVL142:
 1190 043e CF93      		push r28
 1191               	.LCFI45:
 1192               		.cfi_def_cfa_offset 3
 1193               		.cfi_offset 28, -2
 1194               	/* prologue: function */
 1195               	/* frame size = 0 */
 1196               	/* stack size = 1 */
 1197               	.L__stack_usage = 1
 1198 0440 C82F      		mov r28,r24
 370:ds_rtc_lib/rtc.c **** 	twi_begin_transmission(RTC_ADDR);
 1199               		.loc 1 370 0
 1200 0442 88E6      		ldi r24,lo8(104)
 1201 0444 90E0      		ldi r25,0
 1202               	.LVL143:
 1203 0446 00D0      		rcall twi_begin_transmission
 1204               	.LVL144:
 371:ds_rtc_lib/rtc.c **** 	twi_send_byte(DS1307_SRAM_ADDR + offset);
 1205               		.loc 1 371 0
 1206 0448 8C2F      		mov r24,r28
 1207 044a 90E0      		ldi r25,0
 1208 044c 0896      		adiw r24,8
 1209 044e 00D0      		rcall twi_send_byte
 1210               	.LVL145:
 372:ds_rtc_lib/rtc.c **** 	twi_end_transmission();
 1211               		.loc 1 372 0
 1212 0450 00D0      		rcall twi_end_transmission
 1213               	.LVL146:
 373:ds_rtc_lib/rtc.c **** 
 374:ds_rtc_lib/rtc.c **** 	twi_request_from(RTC_ADDR, 1);
 1214               		.loc 1 374 0
 1215 0452 61E0      		ldi r22,lo8(1)
 1216 0454 70E0      		ldi r23,0
 1217 0456 88E6      		ldi r24,lo8(104)
 1218 0458 90E0      		ldi r25,0
 1219 045a 00D0      		rcall twi_request_from
 1220               	.LVL147:
 375:ds_rtc_lib/rtc.c **** 	return twi_receive();
 1221               		.loc 1 375 0
 1222 045c 00D0      		rcall twi_receive
 1223               	.LVL148:
 1224               	/* epilogue start */
 376:ds_rtc_lib/rtc.c **** }
 1225               		.loc 1 376 0
 1226 045e CF91      		pop r28
 1227               	.LVL149:
 1228 0460 0895      		ret
 1229               		.cfi_endproc
 1230               	.LFE19:
 1232               	.global	rtc_get_sram
 1234               	rtc_get_sram:
 1235               	.LFB17:
 353:ds_rtc_lib/rtc.c **** 	// cannot receive 56 bytes in one go, because of the TWI library buffer limit
 1236               		.loc 1 353 0
 1237               		.cfi_startproc
 1238               	.LVL150:
 1239 0462 1F93      		push r17
 1240               	.LCFI46:
 1241               		.cfi_def_cfa_offset 3
 1242               		.cfi_offset 17, -2
 1243 0464 CF93      		push r28
 1244               	.LCFI47:
 1245               		.cfi_def_cfa_offset 4
 1246               		.cfi_offset 28, -3
 1247 0466 DF93      		push r29
 1248               	.LCFI48:
 1249               		.cfi_def_cfa_offset 5
 1250               		.cfi_offset 29, -4
 1251               	/* prologue: function */
 1252               	/* frame size = 0 */
 1253               	/* stack size = 3 */
 1254               	.L__stack_usage = 3
 1255 0468 EC01      		movw r28,r24
 1256               	.LVL151:
 353:ds_rtc_lib/rtc.c **** 	// cannot receive 56 bytes in one go, because of the TWI library buffer limit
 1257               		.loc 1 353 0
 1258 046a 10E0      		ldi r17,0
 1259               	.LVL152:
 1260               	.L63:
 1261               	.LBB8:
 357:ds_rtc_lib/rtc.c **** }
 1262               		.loc 1 357 0 discriminator 2
 1263 046c 812F      		mov r24,r17
 1264 046e 00D0      		rcall rtc_get_sram_byte
 1265               	.LVL153:
 1266 0470 8993      		st Y+,r24
 1267               	.LVL154:
 1268 0472 1F5F      		subi r17,lo8(-(1))
 356:ds_rtc_lib/rtc.c **** 		data[i] = rtc_get_sram_byte(i);
 1269               		.loc 1 356 0 discriminator 2
 1270 0474 1833      		cpi r17,lo8(56)
 1271 0476 01F4      		brne .L63
 1272               	/* epilogue start */
 1273               	.LBE8:
 358:ds_rtc_lib/rtc.c **** 
 1274               		.loc 1 358 0
 1275 0478 DF91      		pop r29
 1276 047a CF91      		pop r28
 1277               	.LVL155:
 1278 047c 1F91      		pop r17
 1279 047e 0895      		ret
 1280               		.cfi_endproc
 1281               	.LFE17:
 1283               	.global	rtc_set_sram_byte
 1285               	rtc_set_sram_byte:
 1286               	.LFB20:
 377:ds_rtc_lib/rtc.c **** 
 378:ds_rtc_lib/rtc.c **** void rtc_set_sram_byte(uint8_t b, uint8_t offset)
 379:ds_rtc_lib/rtc.c **** {
 1287               		.loc 1 379 0
 1288               		.cfi_startproc
 1289               	.LVL156:
 1290 0480 1F93      		push r17
 1291               	.LCFI49:
 1292               		.cfi_def_cfa_offset 3
 1293               		.cfi_offset 17, -2
 1294 0482 CF93      		push r28
 1295               	.LCFI50:
 1296               		.cfi_def_cfa_offset 4
 1297               		.cfi_offset 28, -3
 1298 0484 DF93      		push r29
 1299               	.LCFI51:
 1300               		.cfi_def_cfa_offset 5
 1301               		.cfi_offset 29, -4
 1302 0486 1F92      		push __zero_reg__
 1303               	.LCFI52:
 1304               		.cfi_def_cfa_offset 6
 1305 0488 CDB7      		in r28,__SP_L__
 1306 048a DEB7      		in r29,__SP_H__
 1307               	.LCFI53:
 1308               		.cfi_def_cfa_register 28
 1309               	/* prologue: function */
 1310               	/* frame size = 1 */
 1311               	/* stack size = 4 */
 1312               	.L__stack_usage = 4
 1313 048c 182F      		mov r17,r24
 380:ds_rtc_lib/rtc.c **** 	twi_begin_transmission(RTC_ADDR);
 1314               		.loc 1 380 0
 1315 048e 88E6      		ldi r24,lo8(104)
 1316 0490 90E0      		ldi r25,0
 1317               	.LVL157:
 1318 0492 6983      		std Y+1,r22
 1319 0494 00D0      		rcall twi_begin_transmission
 1320               	.LVL158:
 381:ds_rtc_lib/rtc.c **** 	twi_send_byte(DS1307_SRAM_ADDR + offset);
 1321               		.loc 1 381 0
 1322 0496 6981      		ldd r22,Y+1
 1323 0498 862F      		mov r24,r22
 1324 049a 90E0      		ldi r25,0
 1325 049c 0896      		adiw r24,8
 1326 049e 00D0      		rcall twi_send_byte
 1327               	.LVL159:
 382:ds_rtc_lib/rtc.c **** 	twi_send_byte(b);
 1328               		.loc 1 382 0
 1329 04a0 812F      		mov r24,r17
 1330 04a2 90E0      		ldi r25,0
 1331 04a4 00D0      		rcall twi_send_byte
 1332               	.LVL160:
 1333               	/* epilogue start */
 383:ds_rtc_lib/rtc.c **** 	twi_end_transmission();
 384:ds_rtc_lib/rtc.c **** }
 1334               		.loc 1 384 0
 1335 04a6 0F90      		pop __tmp_reg__
 1336 04a8 DF91      		pop r29
 1337 04aa CF91      		pop r28
 1338 04ac 1F91      		pop r17
 1339               	.LVL161:
 383:ds_rtc_lib/rtc.c **** 	twi_end_transmission();
 1340               		.loc 1 383 0
 1341 04ae 00C0      		rjmp twi_end_transmission
 1342               	.LVL162:
 1343               		.cfi_endproc
 1344               	.LFE20:
 1346               	.global	rtc_set_sram
 1348               	rtc_set_sram:
 1349               	.LFB18:
 361:ds_rtc_lib/rtc.c **** 	// cannot send 56 bytes in one go, because of the TWI library buffer limit
 1350               		.loc 1 361 0
 1351               		.cfi_startproc
 1352               	.LVL163:
 1353 04b0 1F93      		push r17
 1354               	.LCFI54:
 1355               		.cfi_def_cfa_offset 3
 1356               		.cfi_offset 17, -2
 1357 04b2 CF93      		push r28
 1358               	.LCFI55:
 1359               		.cfi_def_cfa_offset 4
 1360               		.cfi_offset 28, -3
 1361 04b4 DF93      		push r29
 1362               	.LCFI56:
 1363               		.cfi_def_cfa_offset 5
 1364               		.cfi_offset 29, -4
 1365               	/* prologue: function */
 1366               	/* frame size = 0 */
 1367               	/* stack size = 3 */
 1368               	.L__stack_usage = 3
 1369 04b6 EC01      		movw r28,r24
 1370               	.LVL164:
 361:ds_rtc_lib/rtc.c **** 	// cannot send 56 bytes in one go, because of the TWI library buffer limit
 1371               		.loc 1 361 0
 1372 04b8 10E0      		ldi r17,0
 1373               	.LVL165:
 1374               	.L67:
 1375               	.LBB9:
 365:ds_rtc_lib/rtc.c **** }
 1376               		.loc 1 365 0 discriminator 2
 1377 04ba 612F      		mov r22,r17
 1378 04bc 8991      		ld r24,Y+
 1379               	.LVL166:
 1380 04be 00D0      		rcall rtc_set_sram_byte
 1381               	.LVL167:
 1382 04c0 1F5F      		subi r17,lo8(-(1))
 364:ds_rtc_lib/rtc.c **** 		rtc_set_sram_byte(data[i], i);
 1383               		.loc 1 364 0 discriminator 2
 1384 04c2 1833      		cpi r17,lo8(56)
 1385 04c4 01F4      		brne .L67
 1386               	/* epilogue start */
 1387               	.LBE9:
 366:ds_rtc_lib/rtc.c **** 
 1388               		.loc 1 366 0
 1389 04c6 DF91      		pop r29
 1390 04c8 CF91      		pop r28
 1391               	.LVL168:
 1392 04ca 1F91      		pop r17
 1393 04cc 0895      		ret
 1394               		.cfi_endproc
 1395               	.LFE18:
 1397               	.global	rtc_SQW_enable
 1399               	rtc_SQW_enable:
 1400               	.LFB21:
 385:ds_rtc_lib/rtc.c **** 
 386:ds_rtc_lib/rtc.c **** void rtc_SQW_enable(bool enable)
 387:ds_rtc_lib/rtc.c **** {
 1401               		.loc 1 387 0
 1402               		.cfi_startproc
 1403               	.LVL169:
 1404 04ce CF93      		push r28
 1405               	.LCFI57:
 1406               		.cfi_def_cfa_offset 3
 1407               		.cfi_offset 28, -2
 1408 04d0 DF93      		push r29
 1409               	.LCFI58:
 1410               		.cfi_def_cfa_offset 4
 1411               		.cfi_offset 29, -3
 1412               	/* prologue: function */
 1413               	/* frame size = 0 */
 1414               	/* stack size = 2 */
 1415               	.L__stack_usage = 2
 1416 04d2 D82F      		mov r29,r24
 388:ds_rtc_lib/rtc.c **** 	if (s_is_ds1307) {
 1417               		.loc 1 388 0
 1418 04d4 8091 0000 		lds r24,s_is_ds1307
 1419               	.LVL170:
 1420 04d8 8823      		tst r24
 1421 04da 01F0      		breq .L69
 1422               	.LBB10:
 389:ds_rtc_lib/rtc.c **** 		twi_begin_transmission(RTC_ADDR);
 1423               		.loc 1 389 0
 1424 04dc 88E6      		ldi r24,lo8(104)
 1425 04de 90E0      		ldi r25,0
 1426 04e0 00D0      		rcall twi_begin_transmission
 1427               	.LVL171:
 390:ds_rtc_lib/rtc.c **** 		twi_send_byte(0x07);
 1428               		.loc 1 390 0
 1429 04e2 87E0      		ldi r24,lo8(7)
 1430 04e4 90E0      		ldi r25,0
 1431 04e6 00D0      		rcall twi_send_byte
 1432               	.LVL172:
 391:ds_rtc_lib/rtc.c **** 		twi_end_transmission();
 1433               		.loc 1 391 0
 1434 04e8 00D0      		rcall twi_end_transmission
 1435               	.LVL173:
 392:ds_rtc_lib/rtc.c **** 
 393:ds_rtc_lib/rtc.c **** 		// read control
 394:ds_rtc_lib/rtc.c ****    		twi_request_from(RTC_ADDR, 1);
 1436               		.loc 1 394 0
 1437 04ea 61E0      		ldi r22,lo8(1)
 1438 04ec 70E0      		ldi r23,0
 1439 04ee 88E6      		ldi r24,lo8(104)
 1440 04f0 90E0      		ldi r25,0
 1441 04f2 00D0      		rcall twi_request_from
 1442               	.LVL174:
 395:ds_rtc_lib/rtc.c **** 		uint8_t control = twi_receive();
 1443               		.loc 1 395 0
 1444 04f4 00D0      		rcall twi_receive
 1445               	.LVL175:
 396:ds_rtc_lib/rtc.c **** 
 397:ds_rtc_lib/rtc.c **** 		if (enable)
 398:ds_rtc_lib/rtc.c **** 			control |=  0b00010000; // set SQWE to 1
 1446               		.loc 1 398 0
 1447 04f6 C82F      		mov r28,r24
 397:ds_rtc_lib/rtc.c **** 			control |=  0b00010000; // set SQWE to 1
 1448               		.loc 1 397 0
 1449 04f8 DD23      		tst r29
 1450 04fa 01F0      		breq .L70
 1451               		.loc 1 398 0
 1452 04fc C061      		ori r28,lo8(16)
 1453               	.LVL176:
 1454 04fe 00C0      		rjmp .L71
 1455               	.LVL177:
 1456               	.L70:
 399:ds_rtc_lib/rtc.c **** 		else
 400:ds_rtc_lib/rtc.c **** 			control &= ~0b00010000; // set SQWE to 0
 1457               		.loc 1 400 0
 1458 0500 CF7E      		andi r28,lo8(-17)
 1459               	.LVL178:
 1460               	.L71:
 401:ds_rtc_lib/rtc.c **** 
 402:ds_rtc_lib/rtc.c **** 		// write control back
 403:ds_rtc_lib/rtc.c **** 		twi_begin_transmission(RTC_ADDR);
 1461               		.loc 1 403 0 discriminator 1
 1462 0502 88E6      		ldi r24,lo8(104)
 1463 0504 90E0      		ldi r25,0
 1464 0506 00D0      		rcall twi_begin_transmission
 1465               	.LVL179:
 404:ds_rtc_lib/rtc.c **** 		twi_send_byte(0x07);
 1466               		.loc 1 404 0 discriminator 1
 1467 0508 87E0      		ldi r24,lo8(7)
 1468 050a 90E0      		ldi r25,0
 1469 050c 00C0      		rjmp .L74
 1470               	.LVL180:
 1471               	.L69:
 1472               	.LBE10:
 1473               	.LBB11:
 405:ds_rtc_lib/rtc.c **** 		twi_send_byte(control);
 406:ds_rtc_lib/rtc.c **** 		twi_end_transmission();
 407:ds_rtc_lib/rtc.c **** 
 408:ds_rtc_lib/rtc.c **** 	}
 409:ds_rtc_lib/rtc.c **** 	else { // DS3231
 410:ds_rtc_lib/rtc.c **** 		twi_begin_transmission(RTC_ADDR);
 1474               		.loc 1 410 0
 1475 050e 88E6      		ldi r24,lo8(104)
 1476 0510 90E0      		ldi r25,0
 1477 0512 00D0      		rcall twi_begin_transmission
 1478               	.LVL181:
 411:ds_rtc_lib/rtc.c **** 		twi_send_byte(0x0E);
 1479               		.loc 1 411 0
 1480 0514 8EE0      		ldi r24,lo8(14)
 1481 0516 90E0      		ldi r25,0
 1482 0518 00D0      		rcall twi_send_byte
 1483               	.LVL182:
 412:ds_rtc_lib/rtc.c **** 		twi_end_transmission();
 1484               		.loc 1 412 0
 1485 051a 00D0      		rcall twi_end_transmission
 1486               	.LVL183:
 413:ds_rtc_lib/rtc.c **** 
 414:ds_rtc_lib/rtc.c **** 		// read control
 415:ds_rtc_lib/rtc.c ****    		twi_request_from(RTC_ADDR, 1);
 1487               		.loc 1 415 0
 1488 051c 61E0      		ldi r22,lo8(1)
 1489 051e 70E0      		ldi r23,0
 1490 0520 88E6      		ldi r24,lo8(104)
 1491 0522 90E0      		ldi r25,0
 1492 0524 00D0      		rcall twi_request_from
 1493               	.LVL184:
 416:ds_rtc_lib/rtc.c **** 		uint8_t control = twi_receive();
 1494               		.loc 1 416 0
 1495 0526 00D0      		rcall twi_receive
 1496               	.LVL185:
 417:ds_rtc_lib/rtc.c **** 
 418:ds_rtc_lib/rtc.c **** 		if (enable) {
 419:ds_rtc_lib/rtc.c **** 			control |=  0b01000000; // set BBSQW to 1
 420:ds_rtc_lib/rtc.c **** 			control &= ~0b00000100; // set INTCN to 0
 1497               		.loc 1 420 0
 1498 0528 C82F      		mov r28,r24
 418:ds_rtc_lib/rtc.c **** 			control |=  0b01000000; // set BBSQW to 1
 1499               		.loc 1 418 0
 1500 052a DD23      		tst r29
 1501 052c 01F0      		breq .L72
 1502               	.LVL186:
 1503               		.loc 1 420 0
 1504 052e CB7F      		andi r28,lo8(-5)
 1505 0530 C064      		ori r28,lo8(64)
 1506               	.LVL187:
 1507 0532 00C0      		rjmp .L73
 1508               	.LVL188:
 1509               	.L72:
 421:ds_rtc_lib/rtc.c **** 		}
 422:ds_rtc_lib/rtc.c **** 		else {
 423:ds_rtc_lib/rtc.c **** 			control &= ~0b01000000; // set BBSQW to 0
 1510               		.loc 1 423 0
 1511 0534 CF7B      		andi r28,lo8(-65)
 1512               	.LVL189:
 1513               	.L73:
 424:ds_rtc_lib/rtc.c **** 		}
 425:ds_rtc_lib/rtc.c **** 
 426:ds_rtc_lib/rtc.c **** 		// write control back
 427:ds_rtc_lib/rtc.c **** 		twi_begin_transmission(RTC_ADDR);
 1514               		.loc 1 427 0
 1515 0536 88E6      		ldi r24,lo8(104)
 1516 0538 90E0      		ldi r25,0
 1517 053a 00D0      		rcall twi_begin_transmission
 1518               	.LVL190:
 428:ds_rtc_lib/rtc.c **** 		twi_send_byte(0x0E);
 1519               		.loc 1 428 0
 1520 053c 8EE0      		ldi r24,lo8(14)
 1521 053e 90E0      		ldi r25,0
 1522               	.LVL191:
 1523               	.L74:
 1524 0540 00D0      		rcall twi_send_byte
 1525               	.LVL192:
 429:ds_rtc_lib/rtc.c **** 		twi_send_byte(control);
 1526               		.loc 1 429 0
 1527 0542 8C2F      		mov r24,r28
 1528 0544 90E0      		ldi r25,0
 1529 0546 00D0      		rcall twi_send_byte
 1530               	.LVL193:
 1531               	/* epilogue start */
 1532               	.LBE11:
 430:ds_rtc_lib/rtc.c **** 		twi_end_transmission();
 431:ds_rtc_lib/rtc.c **** 	}
 432:ds_rtc_lib/rtc.c **** }
 1533               		.loc 1 432 0
 1534 0548 DF91      		pop r29
 1535               	.LVL194:
 1536 054a CF91      		pop r28
 1537               	.LBB12:
 430:ds_rtc_lib/rtc.c **** 		twi_end_transmission();
 1538               		.loc 1 430 0
 1539 054c 00C0      		rjmp twi_end_transmission
 1540               	.LVL195:
 1541               	.LBE12:
 1542               		.cfi_endproc
 1543               	.LFE21:
 1545               	.global	rtc_SQW_set_freq
 1547               	rtc_SQW_set_freq:
 1548               	.LFB22:
 433:ds_rtc_lib/rtc.c **** 
 434:ds_rtc_lib/rtc.c **** void rtc_SQW_set_freq(enum RTC_SQW_FREQ freq)
 435:ds_rtc_lib/rtc.c **** {
 1549               		.loc 1 435 0
 1550               		.cfi_startproc
 1551               	.LVL196:
 1552 054e CF93      		push r28
 1553               	.LCFI59:
 1554               		.cfi_def_cfa_offset 3
 1555               		.cfi_offset 28, -2
 1556 0550 DF93      		push r29
 1557               	.LCFI60:
 1558               		.cfi_def_cfa_offset 4
 1559               		.cfi_offset 29, -3
 1560               	/* prologue: function */
 1561               	/* frame size = 0 */
 1562               	/* stack size = 2 */
 1563               	.L__stack_usage = 2
 1564 0552 D82F      		mov r29,r24
 436:ds_rtc_lib/rtc.c **** 	if (s_is_ds1307) {
 1565               		.loc 1 436 0
 1566 0554 8091 0000 		lds r24,s_is_ds1307
 1567               	.LVL197:
 1568 0558 8823      		tst r24
 1569 055a 01F0      		breq .L76
 1570               	.LBB13:
 437:ds_rtc_lib/rtc.c **** 		twi_begin_transmission(RTC_ADDR);
 1571               		.loc 1 437 0
 1572 055c 88E6      		ldi r24,lo8(104)
 1573 055e 90E0      		ldi r25,0
 1574 0560 00D0      		rcall twi_begin_transmission
 1575               	.LVL198:
 438:ds_rtc_lib/rtc.c **** 		twi_send_byte(0x07);
 1576               		.loc 1 438 0
 1577 0562 87E0      		ldi r24,lo8(7)
 1578 0564 90E0      		ldi r25,0
 1579 0566 00D0      		rcall twi_send_byte
 1580               	.LVL199:
 439:ds_rtc_lib/rtc.c **** 		twi_end_transmission();
 1581               		.loc 1 439 0
 1582 0568 00D0      		rcall twi_end_transmission
 1583               	.LVL200:
 440:ds_rtc_lib/rtc.c **** 
 441:ds_rtc_lib/rtc.c **** 		// read control (uses bits 0 and 1)
 442:ds_rtc_lib/rtc.c ****    		twi_request_from(RTC_ADDR, 1);
 1584               		.loc 1 442 0
 1585 056a 61E0      		ldi r22,lo8(1)
 1586 056c 70E0      		ldi r23,0
 1587 056e 88E6      		ldi r24,lo8(104)
 1588 0570 90E0      		ldi r25,0
 1589 0572 00D0      		rcall twi_request_from
 1590               	.LVL201:
 443:ds_rtc_lib/rtc.c **** 		uint8_t control = twi_receive();
 1591               		.loc 1 443 0
 1592 0574 00D0      		rcall twi_receive
 1593               	.LVL202:
 444:ds_rtc_lib/rtc.c **** 
 445:ds_rtc_lib/rtc.c **** 		control &= ~0b00000011; // Set to 0
 1594               		.loc 1 445 0
 1595 0576 C82F      		mov r28,r24
 1596 0578 CC7F      		andi r28,lo8(-4)
 1597               	.LVL203:
 446:ds_rtc_lib/rtc.c **** 		control |= freq; // Set freq bitmask
 1598               		.loc 1 446 0
 1599 057a CD2B      		or r28,r29
 1600               	.LVL204:
 447:ds_rtc_lib/rtc.c **** 
 448:ds_rtc_lib/rtc.c **** 		// write control back
 449:ds_rtc_lib/rtc.c **** 		twi_begin_transmission(RTC_ADDR);
 1601               		.loc 1 449 0
 1602 057c 88E6      		ldi r24,lo8(104)
 1603 057e 90E0      		ldi r25,0
 1604 0580 00D0      		rcall twi_begin_transmission
 1605               	.LVL205:
 450:ds_rtc_lib/rtc.c **** 		twi_send_byte(0x07);
 1606               		.loc 1 450 0
 1607 0582 87E0      		ldi r24,lo8(7)
 1608 0584 90E0      		ldi r25,0
 1609 0586 00C0      		rjmp .L77
 1610               	.LVL206:
 1611               	.L76:
 1612               	.LBE13:
 1613               	.LBB14:
 451:ds_rtc_lib/rtc.c **** 		twi_send_byte(control);
 452:ds_rtc_lib/rtc.c **** 		twi_end_transmission();
 453:ds_rtc_lib/rtc.c **** 
 454:ds_rtc_lib/rtc.c **** 	}
 455:ds_rtc_lib/rtc.c **** 	else { // DS3231
 456:ds_rtc_lib/rtc.c **** 		twi_begin_transmission(RTC_ADDR);
 1614               		.loc 1 456 0
 1615 0588 88E6      		ldi r24,lo8(104)
 1616 058a 90E0      		ldi r25,0
 1617 058c 00D0      		rcall twi_begin_transmission
 1618               	.LVL207:
 457:ds_rtc_lib/rtc.c **** 		twi_send_byte(0x0E);
 1619               		.loc 1 457 0
 1620 058e 8EE0      		ldi r24,lo8(14)
 1621 0590 90E0      		ldi r25,0
 1622 0592 00D0      		rcall twi_send_byte
 1623               	.LVL208:
 458:ds_rtc_lib/rtc.c **** 		twi_end_transmission();
 1624               		.loc 1 458 0
 1625 0594 00D0      		rcall twi_end_transmission
 1626               	.LVL209:
 459:ds_rtc_lib/rtc.c **** 
 460:ds_rtc_lib/rtc.c **** 		// read control (uses bits 3 and 4)
 461:ds_rtc_lib/rtc.c ****    		twi_request_from(RTC_ADDR, 1);
 1627               		.loc 1 461 0
 1628 0596 61E0      		ldi r22,lo8(1)
 1629 0598 70E0      		ldi r23,0
 1630 059a 88E6      		ldi r24,lo8(104)
 1631 059c 90E0      		ldi r25,0
 1632 059e 00D0      		rcall twi_request_from
 1633               	.LVL210:
 462:ds_rtc_lib/rtc.c **** 		uint8_t control = twi_receive();
 1634               		.loc 1 462 0
 1635 05a0 00D0      		rcall twi_receive
 1636               	.LVL211:
 463:ds_rtc_lib/rtc.c **** 
 464:ds_rtc_lib/rtc.c **** 		control &= ~0b00011000; // Set to 0
 1637               		.loc 1 464 0
 1638 05a2 C82F      		mov r28,r24
 1639 05a4 C77E      		andi r28,lo8(-25)
 1640               	.LVL212:
 465:ds_rtc_lib/rtc.c **** 		control |= (freq << 4); // Set freq bitmask
 1641               		.loc 1 465 0
 1642 05a6 80E1      		ldi r24,lo8(16)
 1643 05a8 D89F      		mul r29,r24
 1644 05aa 9001      		movw r18,r0
 1645 05ac 1124      		clr __zero_reg__
 1646 05ae C22B      		or r28,r18
 1647               	.LVL213:
 466:ds_rtc_lib/rtc.c **** 
 467:ds_rtc_lib/rtc.c **** 		// write control back
 468:ds_rtc_lib/rtc.c **** 		twi_begin_transmission(RTC_ADDR);
 1648               		.loc 1 468 0
 1649 05b0 88E6      		ldi r24,lo8(104)
 1650 05b2 90E0      		ldi r25,0
 1651 05b4 00D0      		rcall twi_begin_transmission
 1652               	.LVL214:
 469:ds_rtc_lib/rtc.c **** 		twi_send_byte(0x0E);
 1653               		.loc 1 469 0
 1654 05b6 8EE0      		ldi r24,lo8(14)
 1655 05b8 90E0      		ldi r25,0
 1656               	.LVL215:
 1657               	.L77:
 1658 05ba 00D0      		rcall twi_send_byte
 1659               	.LVL216:
 470:ds_rtc_lib/rtc.c **** 		twi_send_byte(control);
 1660               		.loc 1 470 0
 1661 05bc 8C2F      		mov r24,r28
 1662 05be 90E0      		ldi r25,0
 1663 05c0 00D0      		rcall twi_send_byte
 1664               	.LVL217:
 1665               	/* epilogue start */
 1666               	.LBE14:
 471:ds_rtc_lib/rtc.c **** 		twi_end_transmission();
 472:ds_rtc_lib/rtc.c **** 	}
 473:ds_rtc_lib/rtc.c **** }
 1667               		.loc 1 473 0
 1668 05c2 DF91      		pop r29
 1669               	.LVL218:
 1670 05c4 CF91      		pop r28
 1671               	.LBB15:
 471:ds_rtc_lib/rtc.c **** 		twi_end_transmission();
 1672               		.loc 1 471 0
 1673 05c6 00C0      		rjmp twi_end_transmission
 1674               	.LVL219:
 1675               	.LBE15:
 1676               		.cfi_endproc
 1677               	.LFE22:
 1679               	.global	rtc_osc32kHz_enable
 1681               	rtc_osc32kHz_enable:
 1682               	.LFB23:
 474:ds_rtc_lib/rtc.c **** 
 475:ds_rtc_lib/rtc.c **** void rtc_osc32kHz_enable(bool enable)
 476:ds_rtc_lib/rtc.c **** {
 1683               		.loc 1 476 0
 1684               		.cfi_startproc
 1685               	.LVL220:
 1686 05c8 CF93      		push r28
 1687               	.LCFI61:
 1688               		.cfi_def_cfa_offset 3
 1689               		.cfi_offset 28, -2
 1690 05ca DF93      		push r29
 1691               	.LCFI62:
 1692               		.cfi_def_cfa_offset 4
 1693               		.cfi_offset 29, -3
 1694               	/* prologue: function */
 1695               	/* frame size = 0 */
 1696               	/* stack size = 2 */
 1697               	.L__stack_usage = 2
 1698 05cc D82F      		mov r29,r24
 477:ds_rtc_lib/rtc.c **** 	if (!s_is_ds3231) return;
 1699               		.loc 1 477 0
 1700 05ce 8091 0000 		lds r24,s_is_ds3231
 1701               	.LVL221:
 1702 05d2 8823      		tst r24
 1703 05d4 01F0      		breq .L78
 478:ds_rtc_lib/rtc.c **** 
 479:ds_rtc_lib/rtc.c **** 	twi_begin_transmission(RTC_ADDR);
 1704               		.loc 1 479 0
 1705 05d6 88E6      		ldi r24,lo8(104)
 1706 05d8 90E0      		ldi r25,0
 1707 05da 00D0      		rcall twi_begin_transmission
 1708               	.LVL222:
 480:ds_rtc_lib/rtc.c **** 	twi_send_byte(0x0F);
 1709               		.loc 1 480 0
 1710 05dc 8FE0      		ldi r24,lo8(15)
 1711 05de 90E0      		ldi r25,0
 1712 05e0 00D0      		rcall twi_send_byte
 1713               	.LVL223:
 481:ds_rtc_lib/rtc.c **** 	twi_end_transmission();
 1714               		.loc 1 481 0
 1715 05e2 00D0      		rcall twi_end_transmission
 1716               	.LVL224:
 482:ds_rtc_lib/rtc.c **** 
 483:ds_rtc_lib/rtc.c **** 	// read status
 484:ds_rtc_lib/rtc.c **** 	twi_request_from(RTC_ADDR, 1);
 1717               		.loc 1 484 0
 1718 05e4 61E0      		ldi r22,lo8(1)
 1719 05e6 70E0      		ldi r23,0
 1720 05e8 88E6      		ldi r24,lo8(104)
 1721 05ea 90E0      		ldi r25,0
 1722 05ec 00D0      		rcall twi_request_from
 1723               	.LVL225:
 485:ds_rtc_lib/rtc.c **** 	uint8_t status = twi_receive();
 1724               		.loc 1 485 0
 1725 05ee 00D0      		rcall twi_receive
 1726               	.LVL226:
 486:ds_rtc_lib/rtc.c **** 
 487:ds_rtc_lib/rtc.c **** 	if (enable)
 488:ds_rtc_lib/rtc.c **** 		status |= 0b00001000; // set to 1
 1727               		.loc 1 488 0
 1728 05f0 C82F      		mov r28,r24
 487:ds_rtc_lib/rtc.c **** 		status |= 0b00001000; // set to 1
 1729               		.loc 1 487 0
 1730 05f2 DD23      		tst r29
 1731 05f4 01F0      		breq .L80
 1732               		.loc 1 488 0
 1733 05f6 C860      		ori r28,lo8(8)
 1734               	.LVL227:
 1735 05f8 00C0      		rjmp .L81
 1736               	.LVL228:
 1737               	.L80:
 489:ds_rtc_lib/rtc.c **** 	else
 490:ds_rtc_lib/rtc.c **** 		status &= ~0b00001000; // Set to 0
 1738               		.loc 1 490 0
 1739 05fa C77F      		andi r28,lo8(-9)
 1740               	.LVL229:
 1741               	.L81:
 491:ds_rtc_lib/rtc.c **** 
 492:ds_rtc_lib/rtc.c **** 	// write status back
 493:ds_rtc_lib/rtc.c **** 	twi_begin_transmission(RTC_ADDR);
 1742               		.loc 1 493 0
 1743 05fc 88E6      		ldi r24,lo8(104)
 1744 05fe 90E0      		ldi r25,0
 1745 0600 00D0      		rcall twi_begin_transmission
 1746               	.LVL230:
 494:ds_rtc_lib/rtc.c **** 	twi_send_byte(0x0F);
 1747               		.loc 1 494 0
 1748 0602 8FE0      		ldi r24,lo8(15)
 1749 0604 90E0      		ldi r25,0
 1750 0606 00D0      		rcall twi_send_byte
 1751               	.LVL231:
 495:ds_rtc_lib/rtc.c **** 	twi_send_byte(status);
 1752               		.loc 1 495 0
 1753 0608 8C2F      		mov r24,r28
 1754 060a 90E0      		ldi r25,0
 1755 060c 00D0      		rcall twi_send_byte
 1756               	.LVL232:
 1757               	/* epilogue start */
 496:ds_rtc_lib/rtc.c **** 	twi_end_transmission();
 497:ds_rtc_lib/rtc.c **** }
 1758               		.loc 1 497 0
 1759 060e DF91      		pop r29
 1760               	.LVL233:
 1761 0610 CF91      		pop r28
 1762               	.LVL234:
 496:ds_rtc_lib/rtc.c **** 	twi_end_transmission();
 1763               		.loc 1 496 0
 1764 0612 00C0      		rjmp twi_end_transmission
 1765               	.LVL235:
 1766               	.L78:
 1767               	/* epilogue start */
 1768               		.loc 1 497 0
 1769 0614 DF91      		pop r29
 1770               	.LVL236:
 1771 0616 CF91      		pop r28
 1772 0618 0895      		ret
 1773               		.cfi_endproc
 1774               	.LFE23:
 1776               	.global	rtc_reset_alarm
 1778               	rtc_reset_alarm:
 1779               	.LFB24:
 498:ds_rtc_lib/rtc.c **** 
 499:ds_rtc_lib/rtc.c **** // Alarm functionality
 500:ds_rtc_lib/rtc.c **** // fixme: should decide if "alarm disabled" mode should be available, or if alarm should always be 
 501:ds_rtc_lib/rtc.c **** // at 00:00:00. Currently, "alarm disabled" only works for ds3231
 502:ds_rtc_lib/rtc.c **** void rtc_reset_alarm(void)
 503:ds_rtc_lib/rtc.c **** {
 1780               		.loc 1 503 0
 1781               		.cfi_startproc
 1782               	/* prologue: function */
 1783               	/* frame size = 0 */
 1784               	/* stack size = 0 */
 1785               	.L__stack_usage = 0
 504:ds_rtc_lib/rtc.c **** 	if (s_is_ds1307) {
 1786               		.loc 1 504 0
 1787 061a 8091 0000 		lds r24,s_is_ds1307
 1788 061e 8823      		tst r24
 1789 0620 01F0      		breq .L83
 505:ds_rtc_lib/rtc.c **** 		rtc_set_sram_byte(0, 0); // hour
 1790               		.loc 1 505 0
 1791 0622 60E0      		ldi r22,0
 1792 0624 80E0      		ldi r24,0
 1793 0626 00D0      		rcall rtc_set_sram_byte
 1794               	.LVL237:
 506:ds_rtc_lib/rtc.c **** 		rtc_set_sram_byte(0, 1); // minute
 1795               		.loc 1 506 0
 1796 0628 61E0      		ldi r22,lo8(1)
 1797 062a 80E0      		ldi r24,0
 1798 062c 00D0      		rcall rtc_set_sram_byte
 1799               	.LVL238:
 507:ds_rtc_lib/rtc.c **** 		rtc_set_sram_byte(0, 2); // second
 1800               		.loc 1 507 0
 1801 062e 62E0      		ldi r22,lo8(2)
 1802 0630 80E0      		ldi r24,0
 1803 0632 00C0      		rjmp rtc_set_sram_byte
 1804               	.LVL239:
 1805               	.L83:
 508:ds_rtc_lib/rtc.c **** 	}
 509:ds_rtc_lib/rtc.c **** 	else {
 510:ds_rtc_lib/rtc.c **** 		// writing 0 to bit 7 of all four alarm 1 registers disables alarm
 511:ds_rtc_lib/rtc.c **** 		rtc_write_byte(0, 0x07); // second
 1806               		.loc 1 511 0
 1807 0634 67E0      		ldi r22,lo8(7)
 1808 0636 80E0      		ldi r24,0
 1809 0638 00D0      		rcall rtc_write_byte
 1810               	.LVL240:
 512:ds_rtc_lib/rtc.c **** 		rtc_write_byte(0, 0x08); // minute
 1811               		.loc 1 512 0
 1812 063a 68E0      		ldi r22,lo8(8)
 1813 063c 80E0      		ldi r24,0
 1814 063e 00D0      		rcall rtc_write_byte
 1815               	.LVL241:
 513:ds_rtc_lib/rtc.c **** 		rtc_write_byte(0, 0x09); // hour
 1816               		.loc 1 513 0
 1817 0640 69E0      		ldi r22,lo8(9)
 1818 0642 80E0      		ldi r24,0
 1819 0644 00D0      		rcall rtc_write_byte
 1820               	.LVL242:
 514:ds_rtc_lib/rtc.c **** 		rtc_write_byte(0, 0x0a); // day
 1821               		.loc 1 514 0
 1822 0646 6AE0      		ldi r22,lo8(10)
 1823 0648 80E0      		ldi r24,0
 1824 064a 00C0      		rjmp rtc_write_byte
 1825               	.LVL243:
 1826               		.cfi_endproc
 1827               	.LFE24:
 1829               	.global	rtc_set_alarm_s
 1831               	rtc_set_alarm_s:
 1832               	.LFB25:
 515:ds_rtc_lib/rtc.c **** 	}
 516:ds_rtc_lib/rtc.c **** }
 517:ds_rtc_lib/rtc.c **** 
 518:ds_rtc_lib/rtc.c **** // fixme: add an option to set whether or not the INTCN and Interrupt Enable flag is set when setti
 519:ds_rtc_lib/rtc.c **** void rtc_set_alarm_s(uint8_t hour, uint8_t min, uint8_t sec)
 520:ds_rtc_lib/rtc.c **** {
 1833               		.loc 1 520 0
 1834               		.cfi_startproc
 1835               	.LVL244:
 1836 064c 0F93      		push r16
 1837               	.LCFI63:
 1838               		.cfi_def_cfa_offset 3
 1839               		.cfi_offset 16, -2
 1840 064e 1F93      		push r17
 1841               	.LCFI64:
 1842               		.cfi_def_cfa_offset 4
 1843               		.cfi_offset 17, -3
 1844 0650 CF93      		push r28
 1845               	.LCFI65:
 1846               		.cfi_def_cfa_offset 5
 1847               		.cfi_offset 28, -4
 1848 0652 DF93      		push r29
 1849               	.LCFI66:
 1850               		.cfi_def_cfa_offset 6
 1851               		.cfi_offset 29, -5
 1852 0654 1F92      		push __zero_reg__
 1853               	.LCFI67:
 1854               		.cfi_def_cfa_offset 7
 1855 0656 CDB7      		in r28,__SP_L__
 1856 0658 DEB7      		in r29,__SP_H__
 1857               	.LCFI68:
 1858               		.cfi_def_cfa_register 28
 1859               	/* prologue: function */
 1860               	/* frame size = 1 */
 1861               	/* stack size = 5 */
 1862               	.L__stack_usage = 5
 1863 065a 182F      		mov r17,r24
 1864 065c 062F      		mov r16,r22
 521:ds_rtc_lib/rtc.c **** 	if (hour > 23) return;
 1865               		.loc 1 521 0
 1866 065e 8831      		cpi r24,lo8(24)
 1867 0660 00F4      		brsh .L84
 522:ds_rtc_lib/rtc.c **** 	if (min > 59) return;
 1868               		.loc 1 522 0
 1869 0662 6C33      		cpi r22,lo8(60)
 1870 0664 00F4      		brsh .L84
 523:ds_rtc_lib/rtc.c **** 	if (sec > 59) return;
 1871               		.loc 1 523 0
 1872 0666 4C33      		cpi r20,lo8(60)
 1873 0668 00F4      		brsh .L84
 524:ds_rtc_lib/rtc.c **** 
 525:ds_rtc_lib/rtc.c **** 	if (s_is_ds1307) {
 1874               		.loc 1 525 0
 1875 066a 8091 0000 		lds r24,s_is_ds1307
 1876               	.LVL245:
 1877 066e 8823      		tst r24
 1878 0670 01F0      		breq .L86
 526:ds_rtc_lib/rtc.c **** 		rtc_set_sram_byte(hour, 0); // hour
 1879               		.loc 1 526 0
 1880 0672 60E0      		ldi r22,0
 1881               	.LVL246:
 1882 0674 812F      		mov r24,r17
 1883 0676 4983      		std Y+1,r20
 1884 0678 00D0      		rcall rtc_set_sram_byte
 1885               	.LVL247:
 527:ds_rtc_lib/rtc.c **** 		rtc_set_sram_byte(min,  1); // minute
 1886               		.loc 1 527 0
 1887 067a 61E0      		ldi r22,lo8(1)
 1888 067c 802F      		mov r24,r16
 1889 067e 00D0      		rcall rtc_set_sram_byte
 1890               	.LVL248:
 528:ds_rtc_lib/rtc.c **** 		rtc_set_sram_byte(sec,  2); // second
 1891               		.loc 1 528 0
 1892 0680 62E0      		ldi r22,lo8(2)
 1893 0682 4981      		ldd r20,Y+1
 1894 0684 842F      		mov r24,r20
 1895               	/* epilogue start */
 529:ds_rtc_lib/rtc.c **** 	}
 530:ds_rtc_lib/rtc.c **** 	else {
 531:ds_rtc_lib/rtc.c **** 		/*
 532:ds_rtc_lib/rtc.c **** 		 *  07h: A1M1:0  Alarm 1 seconds
 533:ds_rtc_lib/rtc.c **** 		 *  08h: A1M2:0  Alarm 1 minutes
 534:ds_rtc_lib/rtc.c **** 		 *  09h: A1M3:0  Alarm 1 hour (bit6 is am/pm flag in 12h mode)
 535:ds_rtc_lib/rtc.c **** 		 *  0ah: A1M4:1  Alarm 1 day/date (bit6: 1 for day, 0 for date)
 536:ds_rtc_lib/rtc.c **** 		 *  Sets alarm to fire when hour, minute and second matches
 537:ds_rtc_lib/rtc.c **** 		 */
 538:ds_rtc_lib/rtc.c **** 		rtc_write_byte(dec2bcd(sec),  0x07); // second
 539:ds_rtc_lib/rtc.c **** 		rtc_write_byte(dec2bcd(min),  0x08); // minute
 540:ds_rtc_lib/rtc.c **** 		rtc_write_byte(dec2bcd(hour), 0x09); // hour
 541:ds_rtc_lib/rtc.c **** 		rtc_write_byte(0b10000001,         0x0a); // day (upper bit must be set)
 542:ds_rtc_lib/rtc.c **** 
 543:ds_rtc_lib/rtc.c **** 		// clear alarm flag
 544:ds_rtc_lib/rtc.c **** 		uint8_t val = rtc_read_byte(0x0f);
 545:ds_rtc_lib/rtc.c **** 		rtc_write_byte(val & ~0b00000001, 0x0f);
 546:ds_rtc_lib/rtc.c **** 	}
 547:ds_rtc_lib/rtc.c **** }
 1896               		.loc 1 547 0
 1897 0686 0F90      		pop __tmp_reg__
 1898 0688 DF91      		pop r29
 1899 068a CF91      		pop r28
 1900 068c 1F91      		pop r17
 1901               	.LVL249:
 1902 068e 0F91      		pop r16
 1903               	.LVL250:
 528:ds_rtc_lib/rtc.c **** 		rtc_set_sram_byte(sec,  2); // second
 1904               		.loc 1 528 0
 1905 0690 00C0      		rjmp rtc_set_sram_byte
 1906               	.LVL251:
 1907               	.L86:
 1908               	.LBB16:
 538:ds_rtc_lib/rtc.c **** 		rtc_write_byte(dec2bcd(min),  0x08); // minute
 1909               		.loc 1 538 0
 1910 0692 842F      		mov r24,r20
 1911 0694 00D0      		rcall dec2bcd
 1912               	.LVL252:
 1913 0696 67E0      		ldi r22,lo8(7)
 1914 0698 00D0      		rcall rtc_write_byte
 1915               	.LVL253:
 539:ds_rtc_lib/rtc.c **** 		rtc_write_byte(dec2bcd(hour), 0x09); // hour
 1916               		.loc 1 539 0
 1917 069a 802F      		mov r24,r16
 1918 069c 00D0      		rcall dec2bcd
 1919               	.LVL254:
 1920 069e 68E0      		ldi r22,lo8(8)
 1921 06a0 00D0      		rcall rtc_write_byte
 1922               	.LVL255:
 540:ds_rtc_lib/rtc.c **** 		rtc_write_byte(0b10000001,         0x0a); // day (upper bit must be set)
 1923               		.loc 1 540 0
 1924 06a2 812F      		mov r24,r17
 1925 06a4 00D0      		rcall dec2bcd
 1926               	.LVL256:
 1927 06a6 69E0      		ldi r22,lo8(9)
 1928 06a8 00D0      		rcall rtc_write_byte
 1929               	.LVL257:
 541:ds_rtc_lib/rtc.c **** 
 1930               		.loc 1 541 0
 1931 06aa 6AE0      		ldi r22,lo8(10)
 1932 06ac 81E8      		ldi r24,lo8(-127)
 1933 06ae 00D0      		rcall rtc_write_byte
 1934               	.LVL258:
 544:ds_rtc_lib/rtc.c **** 		rtc_write_byte(val & ~0b00000001, 0x0f);
 1935               		.loc 1 544 0
 1936 06b0 8FE0      		ldi r24,lo8(15)
 1937 06b2 00D0      		rcall rtc_read_byte
 1938               	.LVL259:
 545:ds_rtc_lib/rtc.c **** 	}
 1939               		.loc 1 545 0
 1940 06b4 6FE0      		ldi r22,lo8(15)
 1941 06b6 8E7F      		andi r24,lo8(-2)
 1942               	.LVL260:
 1943               	/* epilogue start */
 1944               	.LBE16:
 1945               		.loc 1 547 0
 1946 06b8 0F90      		pop __tmp_reg__
 1947 06ba DF91      		pop r29
 1948 06bc CF91      		pop r28
 1949 06be 1F91      		pop r17
 1950               	.LVL261:
 1951 06c0 0F91      		pop r16
 1952               	.LVL262:
 1953               	.LBB17:
 545:ds_rtc_lib/rtc.c **** 	}
 1954               		.loc 1 545 0
 1955 06c2 00C0      		rjmp rtc_write_byte
 1956               	.LVL263:
 1957               	.L84:
 1958               	/* epilogue start */
 1959               	.LBE17:
 1960               		.loc 1 547 0
 1961 06c4 0F90      		pop __tmp_reg__
 1962 06c6 DF91      		pop r29
 1963 06c8 CF91      		pop r28
 1964 06ca 1F91      		pop r17
 1965               	.LVL264:
 1966 06cc 0F91      		pop r16
 1967               	.LVL265:
 1968 06ce 0895      		ret
 1969               		.cfi_endproc
 1970               	.LFE25:
 1972               	.global	rtc_set_alarm
 1974               	rtc_set_alarm:
 1975               	.LFB26:
 548:ds_rtc_lib/rtc.c **** 
 549:ds_rtc_lib/rtc.c **** void rtc_set_alarm(struct tm* tm_)
 550:ds_rtc_lib/rtc.c **** {
 1976               		.loc 1 550 0
 1977               		.cfi_startproc
 1978               	.LVL266:
 1979               	/* prologue: function */
 1980               	/* frame size = 0 */
 1981               	/* stack size = 0 */
 1982               	.L__stack_usage = 0
 1983 06d0 FC01      		movw r30,r24
 551:ds_rtc_lib/rtc.c **** 	if (!tm_) return;
 1984               		.loc 1 551 0
 1985 06d2 0097      		sbiw r24,0
 1986 06d4 01F0      		breq .L87
 552:ds_rtc_lib/rtc.c **** 	rtc_set_alarm_s(tm_->hour, tm_->min, tm_->sec);
 1987               		.loc 1 552 0
 1988 06d6 4081      		ld r20,Z
 1989 06d8 6281      		ldd r22,Z+2
 1990 06da 8481      		ldd r24,Z+4
 1991               	.LVL267:
 1992 06dc 00C0      		rjmp rtc_set_alarm_s
 1993               	.LVL268:
 1994               	.L87:
 1995 06de 0895      		ret
 1996               		.cfi_endproc
 1997               	.LFE26:
 1999               	.global	rtc_get_alarm_s
 2001               	rtc_get_alarm_s:
 2002               	.LFB27:
 553:ds_rtc_lib/rtc.c **** }
 554:ds_rtc_lib/rtc.c **** 
 555:ds_rtc_lib/rtc.c **** void rtc_get_alarm_s(uint8_t* hour, uint8_t* min, uint8_t* sec)
 556:ds_rtc_lib/rtc.c **** {
 2003               		.loc 1 556 0
 2004               		.cfi_startproc
 2005               	.LVL269:
 2006 06e0 EF92      		push r14
 2007               	.LCFI69:
 2008               		.cfi_def_cfa_offset 3
 2009               		.cfi_offset 14, -2
 2010 06e2 FF92      		push r15
 2011               	.LCFI70:
 2012               		.cfi_def_cfa_offset 4
 2013               		.cfi_offset 15, -3
 2014 06e4 0F93      		push r16
 2015               	.LCFI71:
 2016               		.cfi_def_cfa_offset 5
 2017               		.cfi_offset 16, -4
 2018 06e6 1F93      		push r17
 2019               	.LCFI72:
 2020               		.cfi_def_cfa_offset 6
 2021               		.cfi_offset 17, -5
 2022 06e8 CF93      		push r28
 2023               	.LCFI73:
 2024               		.cfi_def_cfa_offset 7
 2025               		.cfi_offset 28, -6
 2026 06ea DF93      		push r29
 2027               	.LCFI74:
 2028               		.cfi_def_cfa_offset 8
 2029               		.cfi_offset 29, -7
 2030               	/* prologue: function */
 2031               	/* frame size = 0 */
 2032               	/* stack size = 6 */
 2033               	.L__stack_usage = 6
 2034 06ec EC01      		movw r28,r24
 2035 06ee 7B01      		movw r14,r22
 2036 06f0 8A01      		movw r16,r20
 557:ds_rtc_lib/rtc.c **** 	if (s_is_ds1307) {
 2037               		.loc 1 557 0
 2038 06f2 8091 0000 		lds r24,s_is_ds1307
 2039               	.LVL270:
 2040 06f6 8823      		tst r24
 2041 06f8 01F0      		breq .L90
 558:ds_rtc_lib/rtc.c **** 		if (hour) *hour = rtc_get_sram_byte(0);
 2042               		.loc 1 558 0
 2043 06fa 2097      		sbiw r28,0
 2044 06fc 01F0      		breq .L91
 2045               		.loc 1 558 0 is_stmt 0 discriminator 1
 2046 06fe 80E0      		ldi r24,0
 2047 0700 00D0      		rcall rtc_get_sram_byte
 2048               	.LVL271:
 2049 0702 8883      		st Y,r24
 2050               	.L91:
 559:ds_rtc_lib/rtc.c **** 		if (min)  *min  = rtc_get_sram_byte(1);
 2051               		.loc 1 559 0 is_stmt 1
 2052 0704 E114      		cp r14,__zero_reg__
 2053 0706 F104      		cpc r15,__zero_reg__
 2054 0708 01F0      		breq .L92
 2055               		.loc 1 559 0 is_stmt 0 discriminator 1
 2056 070a 81E0      		ldi r24,lo8(1)
 2057 070c 00D0      		rcall rtc_get_sram_byte
 2058               	.LVL272:
 2059 070e F701      		movw r30,r14
 2060 0710 8083      		st Z,r24
 2061               	.L92:
 560:ds_rtc_lib/rtc.c **** 		if (sec)  *sec  = rtc_get_sram_byte(2);
 2062               		.loc 1 560 0 is_stmt 1
 2063 0712 0115      		cp r16,__zero_reg__
 2064 0714 1105      		cpc r17,__zero_reg__
 2065 0716 01F0      		breq .L89
 2066               		.loc 1 560 0 is_stmt 0 discriminator 1
 2067 0718 82E0      		ldi r24,lo8(2)
 2068 071a 00D0      		rcall rtc_get_sram_byte
 2069               	.LVL273:
 2070 071c F801      		movw r30,r16
 2071 071e 8083      		st Z,r24
 2072 0720 00C0      		rjmp .L89
 2073               	.L90:
 561:ds_rtc_lib/rtc.c **** 	}
 562:ds_rtc_lib/rtc.c **** 	else {
 563:ds_rtc_lib/rtc.c **** 		*sec  = bcd2dec(rtc_read_byte(0x07) & ~0b10000000);
 2074               		.loc 1 563 0 is_stmt 1
 2075 0722 87E0      		ldi r24,lo8(7)
 2076 0724 00D0      		rcall rtc_read_byte
 2077               	.LVL274:
 2078 0726 8F77      		andi r24,lo8(127)
 2079 0728 00D0      		rcall bcd2dec
 2080               	.LVL275:
 2081 072a F801      		movw r30,r16
 2082 072c 8083      		st Z,r24
 564:ds_rtc_lib/rtc.c **** 		*min  = bcd2dec(rtc_read_byte(0x08) & ~0b10000000);
 2083               		.loc 1 564 0
 2084 072e 88E0      		ldi r24,lo8(8)
 2085 0730 00D0      		rcall rtc_read_byte
 2086               	.LVL276:
 2087 0732 8F77      		andi r24,lo8(127)
 2088 0734 00D0      		rcall bcd2dec
 2089               	.LVL277:
 2090 0736 F701      		movw r30,r14
 2091 0738 8083      		st Z,r24
 565:ds_rtc_lib/rtc.c **** 		*hour = bcd2dec(rtc_read_byte(0x09) & ~0b10000000);
 2092               		.loc 1 565 0
 2093 073a 89E0      		ldi r24,lo8(9)
 2094 073c 00D0      		rcall rtc_read_byte
 2095               	.LVL278:
 2096 073e 8F77      		andi r24,lo8(127)
 2097 0740 00D0      		rcall bcd2dec
 2098               	.LVL279:
 2099 0742 8883      		st Y,r24
 2100               	.L89:
 2101               	/* epilogue start */
 566:ds_rtc_lib/rtc.c **** 	}
 567:ds_rtc_lib/rtc.c **** }
 2102               		.loc 1 567 0
 2103 0744 DF91      		pop r29
 2104 0746 CF91      		pop r28
 2105               	.LVL280:
 2106 0748 1F91      		pop r17
 2107 074a 0F91      		pop r16
 2108               	.LVL281:
 2109 074c FF90      		pop r15
 2110 074e EF90      		pop r14
 2111               	.LVL282:
 2112 0750 0895      		ret
 2113               		.cfi_endproc
 2114               	.LFE27:
 2116               	.global	rtc_get_alarm
 2118               	rtc_get_alarm:
 2119               	.LFB28:
 568:ds_rtc_lib/rtc.c **** 
 569:ds_rtc_lib/rtc.c **** struct tm* rtc_get_alarm(void)
 570:ds_rtc_lib/rtc.c **** {
 2120               		.loc 1 570 0
 2121               		.cfi_startproc
 2122 0752 CF93      		push r28
 2123               	.LCFI75:
 2124               		.cfi_def_cfa_offset 3
 2125               		.cfi_offset 28, -2
 2126 0754 DF93      		push r29
 2127               	.LCFI76:
 2128               		.cfi_def_cfa_offset 4
 2129               		.cfi_offset 29, -3
 2130 0756 00D0      		rcall .
 2131 0758 1F92      		push __zero_reg__
 2132               	.LCFI77:
 2133               		.cfi_def_cfa_offset 7
 2134 075a CDB7      		in r28,__SP_L__
 2135 075c DEB7      		in r29,__SP_H__
 2136               	.LCFI78:
 2137               		.cfi_def_cfa_register 28
 2138               	/* prologue: function */
 2139               	/* frame size = 3 */
 2140               	/* stack size = 5 */
 2141               	.L__stack_usage = 5
 571:ds_rtc_lib/rtc.c **** 	uint8_t hour, min, sec;
 572:ds_rtc_lib/rtc.c **** 
 573:ds_rtc_lib/rtc.c **** 	rtc_get_alarm_s(&hour, &min, &sec);
 2142               		.loc 1 573 0
 2143 075e AE01      		movw r20,r28
 2144 0760 4F5F      		subi r20,-1
 2145 0762 5F4F      		sbci r21,-1
 2146 0764 BE01      		movw r22,r28
 2147 0766 6E5F      		subi r22,-2
 2148 0768 7F4F      		sbci r23,-1
 2149 076a CE01      		movw r24,r28
 2150 076c 0396      		adiw r24,3
 2151 076e 00D0      		rcall rtc_get_alarm_s
 2152               	.LVL283:
 574:ds_rtc_lib/rtc.c **** 	_tm.hour = hour;
 2153               		.loc 1 574 0
 2154 0770 8B81      		ldd r24,Y+3
 2155 0772 90E0      		ldi r25,0
 2156 0774 9093 0000 		sts _tm+4+1,r25
 2157 0778 8093 0000 		sts _tm+4,r24
 575:ds_rtc_lib/rtc.c **** 	_tm.min = min;
 2158               		.loc 1 575 0
 2159 077c 8A81      		ldd r24,Y+2
 2160 077e 90E0      		ldi r25,0
 2161 0780 9093 0000 		sts _tm+2+1,r25
 2162 0784 8093 0000 		sts _tm+2,r24
 576:ds_rtc_lib/rtc.c **** 	_tm.sec = sec;
 2163               		.loc 1 576 0
 2164 0788 8981      		ldd r24,Y+1
 2165 078a 90E0      		ldi r25,0
 2166 078c 9093 0000 		sts _tm+1,r25
 2167 0790 8093 0000 		sts _tm,r24
 577:ds_rtc_lib/rtc.c **** 	return &_tm;
 578:ds_rtc_lib/rtc.c **** }
 2168               		.loc 1 578 0
 2169 0794 80E0      		ldi r24,lo8(_tm)
 2170 0796 90E0      		ldi r25,hi8(_tm)
 2171               	/* epilogue start */
 2172 0798 0F90      		pop __tmp_reg__
 2173 079a 0F90      		pop __tmp_reg__
 2174 079c 0F90      		pop __tmp_reg__
 2175 079e DF91      		pop r29
 2176 07a0 CF91      		pop r28
 2177 07a2 0895      		ret
 2178               		.cfi_endproc
 2179               	.LFE28:
 2181               	.global	rtc_check_alarm
 2183               	rtc_check_alarm:
 2184               	.LFB29:
 579:ds_rtc_lib/rtc.c **** 
 580:ds_rtc_lib/rtc.c **** bool rtc_check_alarm(void)
 581:ds_rtc_lib/rtc.c **** {
 2185               		.loc 1 581 0
 2186               		.cfi_startproc
 2187 07a4 FF92      		push r15
 2188               	.LCFI79:
 2189               		.cfi_def_cfa_offset 3
 2190               		.cfi_offset 15, -2
 2191 07a6 0F93      		push r16
 2192               	.LCFI80:
 2193               		.cfi_def_cfa_offset 4
 2194               		.cfi_offset 16, -3
 2195 07a8 1F93      		push r17
 2196               	.LCFI81:
 2197               		.cfi_def_cfa_offset 5
 2198               		.cfi_offset 17, -4
 2199 07aa CF93      		push r28
 2200               	.LCFI82:
 2201               		.cfi_def_cfa_offset 6
 2202               		.cfi_offset 28, -5
 2203 07ac DF93      		push r29
 2204               	.LCFI83:
 2205               		.cfi_def_cfa_offset 7
 2206               		.cfi_offset 29, -6
 2207 07ae 00D0      		rcall .
 2208 07b0 1F92      		push __zero_reg__
 2209               	.LCFI84:
 2210               		.cfi_def_cfa_offset 10
 2211 07b2 CDB7      		in r28,__SP_L__
 2212 07b4 DEB7      		in r29,__SP_H__
 2213               	.LCFI85:
 2214               		.cfi_def_cfa_register 28
 2215               	/* prologue: function */
 2216               	/* frame size = 3 */
 2217               	/* stack size = 8 */
 2218               	.L__stack_usage = 8
 582:ds_rtc_lib/rtc.c **** 	if (s_is_ds1307) {
 2219               		.loc 1 582 0
 2220 07b6 8091 0000 		lds r24,s_is_ds1307
 2221 07ba 8823      		tst r24
 2222 07bc 01F0      		breq .L105
 2223               	.LBB18:
 583:ds_rtc_lib/rtc.c **** 		uint8_t hour = rtc_get_sram_byte(0);
 2224               		.loc 1 583 0
 2225 07be 80E0      		ldi r24,0
 2226 07c0 00D0      		rcall rtc_get_sram_byte
 2227               	.LVL284:
 2228 07c2 F82E      		mov r15,r24
 2229               	.LVL285:
 584:ds_rtc_lib/rtc.c **** 		uint8_t min  = rtc_get_sram_byte(1);
 2230               		.loc 1 584 0
 2231 07c4 81E0      		ldi r24,lo8(1)
 2232 07c6 00D0      		rcall rtc_get_sram_byte
 2233               	.LVL286:
 2234 07c8 082F      		mov r16,r24
 2235               	.LVL287:
 585:ds_rtc_lib/rtc.c **** 		uint8_t sec  = rtc_get_sram_byte(2);
 2236               		.loc 1 585 0
 2237 07ca 82E0      		ldi r24,lo8(2)
 2238 07cc 00D0      		rcall rtc_get_sram_byte
 2239               	.LVL288:
 2240 07ce 182F      		mov r17,r24
 2241               	.LVL289:
 586:ds_rtc_lib/rtc.c **** 
 587:ds_rtc_lib/rtc.c **** 		uint8_t cur_hour, cur_min, cur_sec;
 588:ds_rtc_lib/rtc.c **** 		rtc_get_time_s(&cur_hour, &cur_min, &cur_sec);
 2242               		.loc 1 588 0
 2243 07d0 AE01      		movw r20,r28
 2244 07d2 4F5F      		subi r20,-1
 2245 07d4 5F4F      		sbci r21,-1
 2246 07d6 BE01      		movw r22,r28
 2247 07d8 6E5F      		subi r22,-2
 2248 07da 7F4F      		sbci r23,-1
 2249 07dc CE01      		movw r24,r28
 2250 07de 0396      		adiw r24,3
 2251 07e0 00D0      		rcall rtc_get_time_s
 2252               	.LVL290:
 589:ds_rtc_lib/rtc.c **** 
 590:ds_rtc_lib/rtc.c **** 		if (cur_hour == hour && cur_min == min && cur_sec == sec)
 2253               		.loc 1 590 0
 2254 07e2 8B81      		ldd r24,Y+3
 2255 07e4 8F11      		cpse r24,r15
 2256 07e6 00C0      		rjmp .L111
 2257               		.loc 1 590 0 is_stmt 0 discriminator 1
 2258 07e8 8A81      		ldd r24,Y+2
 2259 07ea 8013      		cpse r24,r16
 2260 07ec 00C0      		rjmp .L111
 2261 07ee 81E0      		ldi r24,lo8(1)
 2262 07f0 9981      		ldd r25,Y+1
 2263 07f2 9117      		cp r25,r17
 2264 07f4 01F0      		breq .L108
 2265               	.L111:
 591:ds_rtc_lib/rtc.c **** 			return true;
 592:ds_rtc_lib/rtc.c **** 		return false;
 2266               		.loc 1 592 0 is_stmt 1
 2267 07f6 80E0      		ldi r24,0
 2268 07f8 00C0      		rjmp .L108
 2269               	.LVL291:
 2270               	.L105:
 2271               	.LBE18:
 2272               	.LBB19:
 593:ds_rtc_lib/rtc.c **** 	}
 594:ds_rtc_lib/rtc.c **** 	else {
 595:ds_rtc_lib/rtc.c **** 		// Alarm 1 flag (A1F) in bit 0
 596:ds_rtc_lib/rtc.c **** 		uint8_t val = rtc_read_byte(0x0f);
 2273               		.loc 1 596 0
 2274 07fa 8FE0      		ldi r24,lo8(15)
 2275 07fc 00D0      		rcall rtc_read_byte
 2276               	.LVL292:
 597:ds_rtc_lib/rtc.c **** 
 598:ds_rtc_lib/rtc.c **** 		// clear flag when set
 599:ds_rtc_lib/rtc.c **** 		if (val & 1)
 2277               		.loc 1 599 0
 2278 07fe 182F      		mov r17,r24
 2279 0800 1170      		andi r17,lo8(1)
 2280 0802 80FF      		sbrs r24,0
 2281 0804 00C0      		rjmp .L109
 600:ds_rtc_lib/rtc.c **** 			rtc_write_byte(val & ~0b00000001, 0x0f);
 2282               		.loc 1 600 0
 2283 0806 6FE0      		ldi r22,lo8(15)
 2284 0808 8E7F      		andi r24,lo8(-2)
 2285               	.LVL293:
 2286 080a 00D0      		rcall rtc_write_byte
 2287               	.LVL294:
 2288               	.L109:
 601:ds_rtc_lib/rtc.c **** 
 602:ds_rtc_lib/rtc.c **** 		return val & 1 ? 1 : 0;
 2289               		.loc 1 602 0
 2290 080c 812F      		mov r24,r17
 2291 080e 8170      		andi r24,lo8(1)
 2292               	.L108:
 2293               	/* epilogue start */
 2294               	.LBE19:
 603:ds_rtc_lib/rtc.c **** 	}
 604:ds_rtc_lib/rtc.c **** }
 2295               		.loc 1 604 0
 2296 0810 0F90      		pop __tmp_reg__
 2297 0812 0F90      		pop __tmp_reg__
 2298 0814 0F90      		pop __tmp_reg__
 2299 0816 DF91      		pop r29
 2300 0818 CF91      		pop r28
 2301 081a 1F91      		pop r17
 2302 081c 0F91      		pop r16
 2303 081e FF90      		pop r15
 2304 0820 0895      		ret
 2305               		.cfi_endproc
 2306               	.LFE29:
 2308               		.local	s_is_ds3231
 2309               		.comm	s_is_ds3231,1,1
 2310               		.local	s_is_ds1307
 2311               		.comm	s_is_ds1307,1,1
 2312               		.comm	_tm,17,1
 2313               	.Letext0:
 2314               		.file 2 "/opt/cross/avr/avr/include/stdint.h"
 2315               		.file 3 "ds_rtc_lib/rtc.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 rtc.c
     /tmp/ccFopvAJ.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccFopvAJ.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccFopvAJ.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccFopvAJ.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccFopvAJ.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccFopvAJ.s:12     .text:0000000000000000 dec2bcd
     /tmp/ccFopvAJ.s:38     .text:0000000000000010 bcd2dec
     /tmp/ccFopvAJ.s:64     .text:0000000000000022 rtc_read_byte
     /tmp/ccFopvAJ.s:112    .text:0000000000000044 rtc_write_byte
     /tmp/ccFopvAJ.s:174    .text:0000000000000072 rtc_init
     /tmp/ccFopvAJ.s:2309   .bss:0000000000000001 s_is_ds1307
                             .bss:0000000000000000 s_is_ds3231
     /tmp/ccFopvAJ.s:262    .text:00000000000000c0 rtc_is_ds1307
     /tmp/ccFopvAJ.s:278    .text:00000000000000c6 rtc_is_ds3231
     /tmp/ccFopvAJ.s:294    .text:00000000000000cc rtc_set_ds1307
     /tmp/ccFopvAJ.s:312    .text:00000000000000d8 rtc_set_ds3231
     /tmp/ccFopvAJ.s:330    .text:00000000000000e4 rtc_get_time
                            *COM*:0000000000000011 _tm
     /tmp/ccFopvAJ.s:524    .text:00000000000001f0 rtc_get_time_s
     /tmp/ccFopvAJ.s:705    .text:00000000000002a4 rtc_set_time
     /tmp/ccFopvAJ.s:796    .text:00000000000002f4 rtc_set_time_s
     /tmp/ccFopvAJ.s:877    .text:000000000000033a rtc_run_clock
     /tmp/ccFopvAJ.s:931    .text:000000000000035c rtc_is_clock_running
     /tmp/ccFopvAJ.s:964    .text:0000000000000374 ds3231_get_temp_int
     /tmp/ccFopvAJ.s:1073   .text:00000000000003d6 rtc_force_temp_conversion
     /tmp/ccFopvAJ.s:1185   .text:000000000000043e rtc_get_sram_byte
     /tmp/ccFopvAJ.s:1234   .text:0000000000000462 rtc_get_sram
     /tmp/ccFopvAJ.s:1285   .text:0000000000000480 rtc_set_sram_byte
     /tmp/ccFopvAJ.s:1348   .text:00000000000004b0 rtc_set_sram
     /tmp/ccFopvAJ.s:1399   .text:00000000000004ce rtc_SQW_enable
     /tmp/ccFopvAJ.s:1547   .text:000000000000054e rtc_SQW_set_freq
     /tmp/ccFopvAJ.s:1681   .text:00000000000005c8 rtc_osc32kHz_enable
     /tmp/ccFopvAJ.s:1778   .text:000000000000061a rtc_reset_alarm
     /tmp/ccFopvAJ.s:1831   .text:000000000000064c rtc_set_alarm_s
     /tmp/ccFopvAJ.s:1974   .text:00000000000006d0 rtc_set_alarm
     /tmp/ccFopvAJ.s:2001   .text:00000000000006e0 rtc_get_alarm_s
     /tmp/ccFopvAJ.s:2118   .text:0000000000000752 rtc_get_alarm
     /tmp/ccFopvAJ.s:2183   .text:00000000000007a4 rtc_check_alarm

UNDEFINED SYMBOLS
__udivmodqi4
twi_begin_transmission
twi_send_byte
twi_end_transmission
twi_request_from
twi_receive
twi_available
__do_clear_bss
